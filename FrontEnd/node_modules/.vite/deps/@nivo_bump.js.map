{
  "version": 3,
  "sources": ["../../@nivo/bump/src/bump/compute.ts", "../../@nivo/bump/src/bump/hooks.ts", "../../@nivo/bump/src/bump/Point.tsx", "../../@nivo/bump/src/bump/defaults.ts", "../../@nivo/bump/src/bump/LineTooltip.tsx", "../../@nivo/bump/src/bump/Line.tsx", "../../@nivo/bump/src/bump/LinesLabels.tsx", "../../@nivo/bump/src/bump/Points.tsx", "../../@nivo/bump/src/bump/Bump.tsx", "../../@nivo/bump/src/bump/ResponsiveBump.tsx", "../../@nivo/bump/src/area-bump/hooks.ts", "../../@nivo/bump/src/area-bump/compute.ts", "../../@nivo/bump/src/area-bump/Area.tsx", "../../@nivo/bump/src/area-bump/AreasLabels.tsx", "../../@nivo/bump/src/area-bump/defaults.ts", "../../@nivo/bump/src/area-bump/AreaTooltip.tsx", "../../@nivo/bump/src/area-bump/AreaBump.tsx", "../../@nivo/bump/src/area-bump/ResponsiveAreaBump.tsx"],
  "sourcesContent": ["import { scalePoint } from 'd3-scale'\nimport { castPointScale } from '@nivo/scales'\nimport {\n    BumpDataProps,\n    BumpDatum,\n    BumpComputedSerie,\n    BumpSeriePoint,\n    BumpSerieExtraProps,\n} from './types'\n\nexport const computeSeries = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    width,\n    height,\n    data,\n    xPadding,\n    xOuterPadding,\n    yOuterPadding,\n}: {\n    width: number\n    height: number\n    data: BumpDataProps<Datum, ExtraProps>['data']\n    xPadding: number\n    xOuterPadding: number\n    yOuterPadding: number\n}) => {\n    const xValuesSet = new Set<Datum['x']>()\n    const yValuesSet = new Set<number>()\n\n    data.forEach(serie => {\n        serie.data.forEach(datum => {\n            xValuesSet.add(datum.x)\n            if (datum.y !== null) {\n                yValuesSet.add(datum.y)\n            }\n        })\n    })\n\n    const xValues: Datum['x'][] = Array.from(xValuesSet)\n    const xScale = castPointScale<Datum['x']>(\n        scalePoint<Datum['x']>().domain(xValues).range([0, width]).padding(xOuterPadding)\n    )\n\n    const yValues: number[] = Array.from(yValuesSet).sort((a, b) => a - b)\n    const yScale = castPointScale<number>(\n        scalePoint<number>().domain(yValues).range([0, height]).padding(yOuterPadding)\n    )\n\n    const linePointPadding = xScale.step() * Math.min(xPadding * 0.5, 0.5)\n\n    const series: Omit<BumpComputedSerie<Datum, ExtraProps>, 'color' | 'opacity' | 'lineWidth'>[] =\n        data.map(rawSerie => {\n            const serie: Omit<\n                BumpComputedSerie<Datum, ExtraProps>,\n                'color' | 'opacity' | 'lineWidth'\n            > = {\n                id: rawSerie.id,\n                data: rawSerie,\n                points: [],\n                linePoints: [],\n            }\n\n            rawSerie.data.forEach((datum, i) => {\n                let x = null\n                let y = null\n\n                if (datum.y !== null) {\n                    x = xScale(datum.x)!\n                    y = yScale(datum.y)!\n                }\n\n                const point: BumpSeriePoint<Datum, ExtraProps> = {\n                    id: `${rawSerie.id}.${i}`,\n                    serie: rawSerie,\n                    data: datum,\n                    x: x as number,\n                    y,\n                }\n                serie.points.push(point)\n\n                // only add pre transition point if the datum is not empty\n                if (point.x !== null) {\n                    if (i === 0) {\n                        serie.linePoints.push([0, point.y])\n                    } else {\n                        serie.linePoints.push([point.x - linePointPadding, point.y])\n                    }\n                }\n\n                serie.linePoints.push([point.x, point.y])\n\n                // only add post transition point if the datum is not empty\n                if (x !== null) {\n                    if (i === rawSerie.data.length - 1 && x) {\n                        serie.linePoints.push([width, point.y])\n                    } else {\n                        serie.linePoints.push([point.x + linePointPadding, point.y])\n                    }\n                }\n\n                // remove points having null coordinates\n                serie.points = serie.points.filter(point => point.x !== null)\n            })\n\n            return serie\n        })\n\n    return {\n        series,\n        xScale,\n        yScale,\n    }\n}\n", "import { createElement, useMemo, useCallback, useState } from 'react'\nimport { line as d3Line, curveBasis, curveLinear } from 'd3-shape'\nimport { useTheme } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    BumpInterpolation,\n    BumpCommonProps,\n    BumpDatum,\n    DefaultBumpDatum,\n    BumpDataProps,\n    BumpComputedSerie,\n    BumpPoint,\n    BumpLabel,\n    BumpLabelData,\n    BumpSerieExtraProps,\n} from './types'\nimport { computeSeries } from './compute'\n\nconst useLineGenerator = (interpolation: BumpInterpolation) =>\n    useMemo(\n        () =>\n            d3Line<[number, number | null]>()\n                .curve(interpolation === 'smooth' ? curveBasis : curveLinear)\n                .defined(d => d[0] !== null && d[1] !== null),\n\n        [interpolation]\n    )\n\nconst useSerieDerivedProp = <Target, Output extends string | number>(\n    instruction: ((target: Target) => Output) | Output\n): ((target: Target) => Output) =>\n    useMemo(() => {\n        if (typeof instruction === 'function') return instruction\n        return () => instruction\n    }, [instruction])\n\nconst useSerieStyle = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    lineWidth,\n    activeLineWidth,\n    inactiveLineWidth,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    isInteractive,\n    activeSerieIds,\n}: {\n    lineWidth: BumpCommonProps<Datum, ExtraProps>['lineWidth']\n    activeLineWidth: BumpCommonProps<Datum, ExtraProps>['activeLineWidth']\n    inactiveLineWidth: BumpCommonProps<Datum, ExtraProps>['inactiveLineWidth']\n    opacity: BumpCommonProps<Datum, ExtraProps>['opacity']\n    activeOpacity: BumpCommonProps<Datum, ExtraProps>['activeOpacity']\n    inactiveOpacity: BumpCommonProps<Datum, ExtraProps>['inactiveOpacity']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activeSerieIds: string[]\n}) => {\n    type Serie = Omit<BumpComputedSerie<Datum, ExtraProps>, 'color' | 'opacity' | 'lineWidth'>\n\n    const getLineWidth = useSerieDerivedProp<Serie, number>(lineWidth)\n    const getActiveLineWidth = useSerieDerivedProp<Serie, number>(activeLineWidth)\n    const getInactiveLineWidth = useSerieDerivedProp<Serie, number>(inactiveLineWidth)\n\n    const getOpacity = useSerieDerivedProp<Serie, number>(opacity)\n    const getActiveOpacity = useSerieDerivedProp<Serie, number>(activeOpacity)\n    const getInactiveOpacity = useSerieDerivedProp<Serie, number>(inactiveOpacity)\n\n    const getNormalStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getOpacity(serie),\n            lineWidth: getLineWidth(serie),\n        }),\n        [getLineWidth, getOpacity]\n    )\n    const getActiveStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getActiveOpacity(serie),\n            lineWidth: getActiveLineWidth(serie),\n        }),\n        [getActiveLineWidth, getActiveOpacity]\n    )\n    const getInactiveStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getInactiveOpacity(serie),\n            lineWidth: getInactiveLineWidth(serie),\n        }),\n        [getInactiveLineWidth, getInactiveOpacity]\n    )\n\n    return useCallback(\n        (serie: Serie) => {\n            if (!isInteractive || activeSerieIds.length === 0) return getNormalStyle(serie)\n            if (activeSerieIds.includes(serie.id)) return getActiveStyle(serie)\n            return getInactiveStyle(serie)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeSerieIds]\n    )\n}\n\nconst usePointStyle = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    pointSize,\n    activePointSize,\n    inactivePointSize,\n    pointBorderWidth,\n    activePointBorderWidth,\n    inactivePointBorderWidth,\n    isInteractive,\n    activeSerieIds,\n}: {\n    pointSize: BumpCommonProps<Datum, ExtraProps>['pointSize']\n    activePointSize: BumpCommonProps<Datum, ExtraProps>['activePointSize']\n    inactivePointSize: BumpCommonProps<Datum, ExtraProps>['inactivePointSize']\n    pointBorderWidth: BumpCommonProps<Datum, ExtraProps>['pointBorderWidth']\n    activePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['activePointBorderWidth']\n    inactivePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['inactivePointBorderWidth']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activeSerieIds: string[]\n}) => {\n    type Point = Omit<BumpPoint<Datum, ExtraProps>, 'size' | 'borderWidth'>\n\n    const getSize = useSerieDerivedProp(pointSize)\n    const getActiveSize = useSerieDerivedProp(activePointSize)\n    const getInactiveSize = useSerieDerivedProp(inactivePointSize)\n\n    const getBorderWidth = useSerieDerivedProp(pointBorderWidth)\n    const getActiveBorderWidth = useSerieDerivedProp(activePointBorderWidth)\n    const getInactiveBorderWidth = useSerieDerivedProp(inactivePointBorderWidth)\n\n    const getNormalStyle = useCallback(\n        (point: Point) => ({\n            size: getSize(point),\n            borderWidth: getBorderWidth(point),\n        }),\n        [getSize, getBorderWidth]\n    )\n    const getActiveStyle = useCallback(\n        (point: Point) => ({\n            size: getActiveSize(point),\n            borderWidth: getActiveBorderWidth(point),\n        }),\n        [getActiveSize, getActiveBorderWidth]\n    )\n    const getInactiveStyle = useCallback(\n        (point: Point) => ({\n            size: getInactiveSize(point),\n            borderWidth: getInactiveBorderWidth(point),\n        }),\n        [getInactiveSize, getInactiveBorderWidth]\n    )\n\n    return useCallback(\n        (point: Point) => {\n            if (!isInteractive || activeSerieIds.length === 0) return getNormalStyle(point)\n            if (activeSerieIds.includes(point.serie.id)) return getActiveStyle(point)\n            return getInactiveStyle(point)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeSerieIds]\n    )\n}\n\nexport const useBump = <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, never>\n>({\n    width,\n    height,\n    data,\n    interpolation,\n    xPadding,\n    xOuterPadding,\n    yOuterPadding,\n    lineWidth,\n    activeLineWidth,\n    inactiveLineWidth,\n    colors,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    pointSize,\n    activePointSize,\n    inactivePointSize,\n    pointColor,\n    pointBorderWidth,\n    activePointBorderWidth,\n    inactivePointBorderWidth,\n    pointBorderColor,\n    isInteractive,\n    defaultActiveSerieIds,\n}: {\n    width: number\n    height: number\n    data: BumpDataProps<Datum, ExtraProps>['data']\n    interpolation: BumpCommonProps<Datum, ExtraProps>['interpolation']\n    xPadding: BumpCommonProps<Datum, ExtraProps>['xPadding']\n    xOuterPadding: BumpCommonProps<Datum, ExtraProps>['xOuterPadding']\n    yOuterPadding: BumpCommonProps<Datum, ExtraProps>['yOuterPadding']\n    lineWidth: BumpCommonProps<Datum, ExtraProps>['lineWidth']\n    activeLineWidth: BumpCommonProps<Datum, ExtraProps>['activeLineWidth']\n    inactiveLineWidth: BumpCommonProps<Datum, ExtraProps>['inactiveLineWidth']\n    colors: BumpCommonProps<Datum, ExtraProps>['colors']\n    opacity: BumpCommonProps<Datum, ExtraProps>['opacity']\n    activeOpacity: BumpCommonProps<Datum, ExtraProps>['activeOpacity']\n    inactiveOpacity: BumpCommonProps<Datum, ExtraProps>['inactiveOpacity']\n    pointSize: BumpCommonProps<Datum, ExtraProps>['pointSize']\n    activePointSize: BumpCommonProps<Datum, ExtraProps>['activePointSize']\n    inactivePointSize: BumpCommonProps<Datum, ExtraProps>['inactivePointSize']\n    pointColor: BumpCommonProps<Datum, ExtraProps>['pointColor']\n    pointBorderWidth: BumpCommonProps<Datum, ExtraProps>['pointBorderWidth']\n    activePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['activePointBorderWidth']\n    inactivePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['inactivePointBorderWidth']\n    pointBorderColor: BumpCommonProps<Datum, ExtraProps>['pointBorderColor']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    defaultActiveSerieIds: string[]\n}) => {\n    const [activeSerieIds, setActiveSerieIds] = useState<string[]>(defaultActiveSerieIds)\n\n    const {\n        series: rawSeries,\n        xScale,\n        yScale,\n    } = useMemo(\n        () =>\n            computeSeries<Datum, ExtraProps>({\n                width,\n                height,\n                data,\n                xPadding,\n                xOuterPadding,\n                yOuterPadding,\n            }),\n        [width, height, data, xPadding, xOuterPadding, yOuterPadding]\n    )\n\n    const lineGenerator = useLineGenerator(interpolation)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const getSerieStyle = useSerieStyle<Datum, ExtraProps>({\n        lineWidth,\n        activeLineWidth,\n        inactiveLineWidth,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        isInteractive,\n        activeSerieIds,\n    })\n\n    const series: BumpComputedSerie<Datum, ExtraProps>[] = useMemo(\n        () =>\n            rawSeries.map(serie => ({\n                ...serie,\n                color: getColor(serie.data),\n                ...getSerieStyle(serie),\n            })),\n        [rawSeries, getColor, getSerieStyle]\n    )\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const getPointStyle = usePointStyle<Datum, ExtraProps>({\n        pointSize,\n        activePointSize,\n        inactivePointSize,\n        pointBorderWidth,\n        activePointBorderWidth,\n        inactivePointBorderWidth,\n        isInteractive,\n        activeSerieIds,\n    })\n    const points: BumpPoint<Datum, ExtraProps>[] = useMemo(() => {\n        const pts: BumpPoint<Datum, ExtraProps>[] = []\n        series.forEach(serie => {\n            serie.points.forEach(rawPoint => {\n                // @ts-ignore\n                const point: BumpPoint<Datum, ExtraProps> = {\n                    ...rawPoint,\n                    serie,\n                    isActive: activeSerieIds.includes(serie.id),\n                    isInactive: activeSerieIds.length > 0 && !activeSerieIds.includes(serie.id),\n                }\n                point.color = getPointColor(point)\n                point.borderColor = getPointBorderColor(point)\n\n                pts.push({\n                    ...point,\n                    ...getPointStyle(point),\n                })\n            })\n        })\n\n        return pts\n    }, [series, getPointColor, getPointBorderColor, getPointStyle, activeSerieIds])\n\n    return {\n        xScale,\n        yScale,\n        series,\n        points,\n        lineGenerator,\n        activeSerieIds,\n        setActiveSerieIds,\n    }\n}\n\nexport const useBumpSerieHandlers = <\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n>({\n    serie,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: BumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: BumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: BumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: BumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: BumpCommonProps<Datum, ExtraProps>['tooltip']\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            setActiveSerieIds([serie.id])\n            onMouseEnter && onMouseEnter(serie, event)\n        },\n        [serie, onMouseEnter, showTooltipFromEvent, setActiveSerieIds, tooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            onMouseMove && onMouseMove(serie, event)\n        },\n        [serie, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setActiveSerieIds([])\n            onMouseLeave && onMouseLeave(serie, event)\n        },\n        [serie, onMouseLeave, hideTooltip, setActiveSerieIds]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            onClick && onClick(serie, event)\n        },\n        [serie, onClick]\n    )\n\n    return useMemo(\n        () => ({\n            onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n            onMouseMove: isInteractive ? handleMouseMove : undefined,\n            onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n            onClick: isInteractive ? handleClick : undefined,\n        }),\n        [isInteractive, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n}\n\nexport const useBumpSeriesLabels = <\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n>({\n    series,\n    position,\n    padding,\n    color,\n    getLabel,\n}: {\n    series: BumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>\n    getLabel: Exclude<BumpLabel<Datum, ExtraProps>, false>\n}) => {\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    return useMemo(() => {\n        let textAnchor: 'start' | 'end'\n        let signedPadding: number\n        if (position === 'start') {\n            textAnchor = 'end'\n            signedPadding = padding * -1\n        } else {\n            textAnchor = 'start'\n            signedPadding = padding\n        }\n\n        const labels: BumpLabelData<Datum, ExtraProps>[] = []\n        series.forEach(serie => {\n            let label = serie.id\n            if (typeof getLabel === 'function') {\n                label = getLabel(serie.data)\n            }\n\n            const point =\n                position === 'start'\n                    ? serie.linePoints[0]\n                    : serie.linePoints[serie.linePoints.length - 1]\n\n            // exclude labels for series having missing data at the beginning/end\n            if (point[0] === null || point[1] === null) {\n                return\n            }\n\n            labels.push({\n                id: serie.id,\n                label,\n                x: point[0] + signedPadding,\n                y: point[1],\n                color: getColor(serie),\n                opacity: serie.opacity,\n                serie,\n                textAnchor,\n            })\n        })\n\n        return labels\n    }, [series, position, padding, getColor, getLabel])\n}\n", "import { SVGAttributes } from 'react'\nimport { useSpring, animated, to } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { BumpDatum, BumpPoint, BumpSerieExtraProps } from './types'\n\nconst pointStyle: SVGAttributes<SVGCircleElement>['style'] = { pointerEvents: 'none' }\n\ninterface PointProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    point: BumpPoint<Datum, ExtraProps>\n}\n\nexport const Point = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    point,\n}: PointProps<Datum, ExtraProps>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring<{\n        x: number\n        y: number\n        radius: number\n        color: string\n        borderWidth: number\n    }>({\n        x: point.x,\n        y: point.y,\n        radius: point.size / 2,\n        color: point.color,\n        borderWidth: point.borderWidth,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.circle\n            data-testid={`point.${point.serie.id}.${point.data.x}`}\n            cx={animatedProps.x}\n            cy={animatedProps.y}\n            r={to(animatedProps.radius, v => Math.max(v, 0))}\n            fill={animatedProps.color}\n            strokeWidth={animatedProps.borderWidth}\n            stroke={point.borderColor}\n            style={pointStyle}\n        />\n    )\n}\n", "import { ModernMotionProps } from '@nivo/core'\nimport { LineTooltip } from './LineTooltip'\nimport { Point } from './Point'\nimport { BumpCommonProps, BumpPointComponent, DefaultBumpDatum } from './types'\n\nconst commonDefaultProps: Omit<\n    BumpCommonProps<DefaultBumpDatum, Record<string, unknown>>,\n    | 'onMouseEnter'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'onClick'\n    | 'margin'\n    | 'theme'\n    | 'axisRight'\n    | 'renderWrapper'\n> = {\n    layers: ['grid', 'axes', 'labels', 'lines', 'points'],\n\n    interpolation: 'smooth',\n    xPadding: 0.6,\n    xOuterPadding: 0.5,\n    yOuterPadding: 0.5,\n\n    colors: { scheme: 'nivo' },\n    lineWidth: 2,\n    activeLineWidth: 4,\n    inactiveLineWidth: 1,\n    opacity: 1,\n    activeOpacity: 1,\n    inactiveOpacity: 0.3,\n\n    startLabel: false,\n    startLabelPadding: 16,\n    startLabelTextColor: { from: 'color' },\n    endLabel: true,\n    endLabelPadding: 16,\n    endLabelTextColor: { from: 'color' },\n\n    pointSize: 6,\n    activePointSize: 8,\n    inactivePointSize: 4,\n    pointColor: { from: 'serie.color' },\n    pointBorderWidth: 0,\n    activePointBorderWidth: 0,\n    inactivePointBorderWidth: 0,\n    pointBorderColor: { from: 'serie.color', modifiers: [['darker', 1.4]] },\n\n    enableGridX: true,\n    enableGridY: true,\n    axisTop: {},\n    axisBottom: {},\n    axisLeft: {},\n\n    isInteractive: true,\n    defaultActiveSerieIds: [],\n    tooltip: LineTooltip,\n\n    role: 'img',\n}\n\nexport const bumpSvgDefaultProps: typeof commonDefaultProps & {\n    pointComponent: BumpPointComponent<DefaultBumpDatum, Record<string, unknown>>\n    animate: boolean\n    motionConfig: ModernMotionProps['motionConfig']\n} = {\n    ...commonDefaultProps,\n    pointComponent: Point,\n    animate: true,\n    motionConfig: 'gentle',\n}\n", "import { BasicTooltip } from '@nivo/tooltip'\nimport { BumpComputedSerie, BumpDatum, BumpSerieExtraProps } from './types'\n\ninterface LineTooltipProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n}\n\nexport const LineTooltip = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    serie,\n}: LineTooltipProps<Datum, ExtraProps>) => (\n    <BasicTooltip\n        data-testid={`tooltip.${serie.data.id}`}\n        id={serie.data.id}\n        enableChip={true}\n        color={serie.color}\n    />\n)\n", "import { useSpring, animated } from '@react-spring/web'\nimport { Line as D3Line } from 'd3-shape'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { BumpCommonProps, BumpComputedSerie, BumpDatum, BumpSerieExtraProps } from './types'\nimport { useBumpSerieHandlers } from './hooks'\n\ninterface LineProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n    lineGenerator: D3Line<[number, number | null]>\n    yStep: number\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: BumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: BumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: BumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: BumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: BumpCommonProps<Datum, ExtraProps>['tooltip']\n}\n\nexport const Line = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    serie,\n    lineGenerator,\n    yStep,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: LineProps<Datum, ExtraProps>) => {\n    const handlers = useBumpSerieHandlers<Datum, ExtraProps>({\n        serie,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        setActiveSerieIds,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const linePath = lineGenerator(serie.linePoints) || ''\n\n    const animatedPath = useAnimatedPath(linePath)\n    const animatedProps = useSpring<{\n        color: string\n        opacity: number\n        lineWidth: number\n    }>({\n        color: serie.color,\n        opacity: serie.opacity,\n        lineWidth: serie.lineWidth,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            <animated.path\n                data-testid={`line.${serie.id}`}\n                fill=\"none\"\n                d={animatedPath}\n                stroke={animatedProps.color}\n                strokeWidth={animatedProps.lineWidth}\n                strokeLinecap=\"round\"\n                strokeOpacity={animatedProps.opacity}\n                style={{ pointerEvents: 'none' }}\n            />\n            {isInteractive && (\n                <path\n                    data-testid={`line.${serie.id}.interactive`}\n                    fill=\"none\"\n                    stroke=\"red\"\n                    strokeOpacity={0}\n                    strokeWidth={yStep}\n                    d={linePath}\n                    strokeLinecap=\"butt\"\n                    onMouseEnter={handlers.onMouseEnter}\n                    onMouseMove={handlers.onMouseMove}\n                    onMouseLeave={handlers.onMouseLeave}\n                    onClick={handlers.onClick}\n                />\n            )}\n        </>\n    )\n}\n", "import { useSprings, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport { BumpComputedSerie, BumpDatum, BumpLabel, BumpSerieExtraProps } from './types'\nimport { useBumpSeriesLabels } from './hooks'\n\ninterface LineLabelsProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    series: BumpComputedSerie<Datum, ExtraProps>[]\n    getLabel: Exclude<BumpLabel<Datum, ExtraProps>, false>\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>\n}\n\nexport const LinesLabels = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    series,\n    getLabel,\n    position,\n    padding,\n    color,\n}: LineLabelsProps<Datum, ExtraProps>) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = useBumpSeriesLabels<Datum, ExtraProps>({\n        series,\n        getLabel,\n        position,\n        padding,\n        color,\n    })\n\n    const springs = useSprings<{\n        x: number\n        y: number\n        opacity: number\n    }>(\n        labels.length,\n        labels.map(label => ({\n            x: label.x,\n            y: label.y,\n            opacity: label.opacity,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return (\n                    <animated.text\n                        data-testid={`label.${position}.${label.serie.id}`}\n                        key={label.id}\n                        x={animatedProps.x}\n                        y={animatedProps.y}\n                        textAnchor={label.textAnchor}\n                        dominantBaseline=\"central\"\n                        opacity={animatedProps.opacity}\n                        style={{\n                            ...theme.labels.text,\n                            fill: label.color,\n                        }}\n                    >\n                        {label.label}\n                    </animated.text>\n                )\n            })}\n        </>\n    )\n}\n", "import { createElement } from 'react'\nimport { BumpDatum, BumpPoint, BumpPointComponent, BumpSerieExtraProps } from './types'\n\ninterface PointsProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    points: BumpPoint<Datum, ExtraProps>[]\n    pointComponent: BumpPointComponent<Datum, ExtraProps>\n}\n\nexport const Points = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    points,\n    pointComponent,\n}: PointsProps<Datum, ExtraProps>) => (\n    <>\n        {points.map(point =>\n            createElement(pointComponent, {\n                key: point.id,\n                point,\n            })\n        )}\n    </>\n)\n", "import { createElement, useMemo, Fragment, ReactNode } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport {\n    BumpCustomLayerProps,\n    BumpDatum,\n    BumpLayerId,\n    BumpSerieExtraProps,\n    BumpSvgProps,\n    DefaultBumpDatum,\n} from './types'\nimport { useBump } from './hooks'\nimport { bumpSvgDefaultProps } from './defaults'\nimport { Line } from './Line'\nimport { LinesLabels } from './LinesLabels'\nimport { Points } from './Points'\n\ntype InnerBumpProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> = Omit<\n    BumpSvgProps<Datum, ExtraProps>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBump = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    data,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    layers = bumpSvgDefaultProps.layers as NonNullable<BumpSvgProps<Datum, ExtraProps>['layers']>,\n\n    interpolation = bumpSvgDefaultProps.interpolation,\n    xPadding = bumpSvgDefaultProps.xPadding,\n    xOuterPadding = bumpSvgDefaultProps.xOuterPadding,\n    yOuterPadding = bumpSvgDefaultProps.yOuterPadding,\n\n    colors = bumpSvgDefaultProps.colors as NonNullable<BumpSvgProps<Datum, ExtraProps>['colors']>,\n    lineWidth = bumpSvgDefaultProps.lineWidth,\n    activeLineWidth = bumpSvgDefaultProps.activeLineWidth,\n    inactiveLineWidth = bumpSvgDefaultProps.inactiveLineWidth,\n    opacity = bumpSvgDefaultProps.opacity,\n    activeOpacity = bumpSvgDefaultProps.activeOpacity,\n    inactiveOpacity = bumpSvgDefaultProps.inactiveOpacity,\n\n    startLabel = bumpSvgDefaultProps.startLabel as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['startLabel']\n    >,\n    startLabelPadding = bumpSvgDefaultProps.startLabelPadding,\n    startLabelTextColor = bumpSvgDefaultProps.startLabelTextColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['startLabelTextColor']\n    >,\n    endLabel = bumpSvgDefaultProps.endLabel as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['endLabel']\n    >,\n    endLabelPadding = bumpSvgDefaultProps.endLabelPadding,\n    endLabelTextColor = bumpSvgDefaultProps.endLabelTextColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['endLabelTextColor']\n    >,\n\n    pointComponent = bumpSvgDefaultProps.pointComponent as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointComponent']\n    >,\n    pointSize = bumpSvgDefaultProps.pointSize,\n    activePointSize = bumpSvgDefaultProps.activePointSize,\n    inactivePointSize = bumpSvgDefaultProps.inactivePointSize,\n    pointColor = bumpSvgDefaultProps.pointColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointColor']\n    >,\n    pointBorderWidth = bumpSvgDefaultProps.pointBorderWidth,\n    activePointBorderWidth = bumpSvgDefaultProps.activePointBorderWidth,\n    inactivePointBorderWidth = bumpSvgDefaultProps.inactivePointBorderWidth,\n    pointBorderColor = bumpSvgDefaultProps.pointBorderColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointBorderColor']\n    >,\n\n    enableGridX = bumpSvgDefaultProps.enableGridX,\n    enableGridY = bumpSvgDefaultProps.enableGridY,\n    axisTop = bumpSvgDefaultProps.axisTop,\n    axisRight,\n    axisBottom = bumpSvgDefaultProps.axisBottom,\n    axisLeft = bumpSvgDefaultProps.axisLeft,\n\n    isInteractive = bumpSvgDefaultProps.isInteractive,\n    defaultActiveSerieIds = bumpSvgDefaultProps.defaultActiveSerieIds,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = bumpSvgDefaultProps.tooltip as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['tooltip']\n    >,\n    role = bumpSvgDefaultProps.role,\n}: InnerBumpProps<Datum, ExtraProps>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { series, points, xScale, yScale, lineGenerator, activeSerieIds, setActiveSerieIds } =\n        useBump<Datum, ExtraProps>({\n            width: innerWidth,\n            height: innerHeight,\n            data,\n            interpolation,\n            xPadding,\n            xOuterPadding,\n            yOuterPadding,\n            lineWidth,\n            activeLineWidth,\n            inactiveLineWidth,\n            colors,\n            opacity,\n            activeOpacity,\n            inactiveOpacity,\n            pointSize,\n            activePointSize,\n            inactivePointSize,\n            pointColor,\n            pointBorderWidth,\n            activePointBorderWidth,\n            inactivePointBorderWidth,\n            pointBorderColor,\n            isInteractive,\n            defaultActiveSerieIds,\n        })\n\n    const layerById: Record<BumpLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        labels: null,\n        lines: null,\n        points: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('lines')) {\n        layerById.lines = (\n            <Fragment key=\"lines\">\n                {series.map(serie => (\n                    <Line<Datum, ExtraProps>\n                        key={serie.id}\n                        serie={serie}\n                        setActiveSerieIds={setActiveSerieIds}\n                        lineGenerator={lineGenerator}\n                        yStep={yScale.step()}\n                        isInteractive={isInteractive}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                        tooltip={tooltip}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('points')) {\n        layerById.points = (\n            <Points<Datum, ExtraProps>\n                key=\"points\"\n                pointComponent={pointComponent}\n                points={points}\n            />\n        )\n    }\n\n    if (layers.includes('labels')) {\n        layerById.labels = (\n            <Fragment key=\"legends\">\n                {startLabel !== false && (\n                    <LinesLabels<Datum, ExtraProps>\n                        series={series}\n                        getLabel={startLabel}\n                        position=\"start\"\n                        padding={startLabelPadding}\n                        color={startLabelTextColor}\n                    />\n                )}\n                {endLabel !== false && (\n                    <LinesLabels<Datum, ExtraProps>\n                        series={series}\n                        getLabel={endLabel}\n                        position=\"end\"\n                        padding={endLabelPadding}\n                        color={endLabelTextColor}\n                    />\n                )}\n            </Fragment>\n        )\n    }\n\n    const customLayerProps: BumpCustomLayerProps<Datum, ExtraProps> = useMemo(\n        () => ({\n            innerHeight,\n            innerWidth,\n            lineGenerator,\n            points,\n            series,\n            xScale,\n            yScale,\n            activeSerieIds,\n            setActiveSerieIds,\n        }),\n        [\n            activeSerieIds,\n            setActiveSerieIds,\n            innerHeight,\n            innerWidth,\n            lineGenerator,\n            points,\n            series,\n            xScale,\n            yScale,\n        ]\n    )\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bump = <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, never>\n>({\n    isInteractive = bumpSvgDefaultProps.isInteractive,\n    animate = bumpSvgDefaultProps.animate,\n    motionConfig = bumpSvgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BumpSvgProps<Datum, ExtraProps>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBump<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { BumpDatum, BumpSerieExtraProps, BumpSvgProps, DefaultBumpDatum } from './types'\nimport { Bump } from './Bump'\n\nexport const ResponsiveBump = <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, never>\n>(\n    props: Omit<BumpSvgProps<Datum, ExtraProps>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <Bump<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n", "import { createElement, useMemo, useCallback, useState } from 'react'\nimport { area as d3Area, curveBasis, curveLinear } from 'd3-shape'\nimport { useTheme } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { computeSeries } from './compute'\nimport {\n    AreaBumpAreaPoint,\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDataProps,\n    AreaBumpDatum,\n    AreaBumpInterpolation,\n    AreaBumpLabel,\n    AreaBumpLabelData,\n    AreaBumpSerieExtraProps,\n    DefaultAreaBumpDatum,\n} from './types'\n\nconst useAreaBumpSeries = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n}) =>\n    useMemo(\n        () => computeSeries<Datum, ExtraProps>({ data, width, height, align, spacing, xPadding }),\n        [data, width, height, align, spacing, xPadding]\n    )\n\nconst useAreaGenerator = (interpolation: AreaBumpInterpolation) =>\n    useMemo(\n        () =>\n            d3Area<AreaBumpAreaPoint>()\n                .x(d => d.x)\n                .y0(d => d.y0)\n                .y1(d => d.y1)\n                .curve(interpolation === 'smooth' ? curveBasis : curveLinear),\n        [interpolation]\n    )\n\nconst useSerieDerivedProp = <Target, Output extends string | number>(\n    instruction: ((target: Target) => Output) | Output\n): ((target: Target) => Output) =>\n    useMemo(() => {\n        if (typeof instruction === 'function') return instruction\n        return () => instruction\n    }, [instruction])\n\nconst useSerieStyle = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    fillOpacity,\n    activeFillOpacity,\n    inactiveFillOpacity,\n    borderWidth,\n    activeBorderWidth,\n    inactiveBorderWidth,\n    borderColor,\n    borderOpacity,\n    activeBorderOpacity,\n    inactiveBorderOpacity,\n    isInteractive,\n    activeSerieIds,\n}: {\n    fillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['fillOpacity']\n    activeFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeFillOpacity']\n    inactiveFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveFillOpacity']\n    borderWidth: AreaBumpCommonProps<Datum, ExtraProps>['borderWidth']\n    activeBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderWidth']\n    inactiveBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderWidth']\n    borderColor: AreaBumpCommonProps<Datum, ExtraProps>['borderColor']\n    borderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['borderOpacity']\n    activeBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderOpacity']\n    inactiveBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderOpacity']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activeSerieIds: string[]\n}) => {\n    type Serie = Omit<\n        AreaBumpComputedSerie<Datum, ExtraProps>,\n        'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n    >\n\n    const getFillOpacity = useSerieDerivedProp<Serie, number>(fillOpacity)\n    const getActiveFillOpacity = useSerieDerivedProp<Serie, number>(activeFillOpacity)\n    const getInactiveFillOpacity = useSerieDerivedProp<Serie, number>(inactiveFillOpacity)\n\n    const getBorderWidth = useSerieDerivedProp<Serie, number>(borderWidth)\n    const getActiveBorderWidth = useSerieDerivedProp<Serie, number>(activeBorderWidth)\n    const getInactiveBorderWidth = useSerieDerivedProp<Serie, number>(inactiveBorderWidth)\n\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n\n    const getBorderOpacity = useSerieDerivedProp<Serie, number>(borderOpacity)\n    const getActiveBorderOpacity = useSerieDerivedProp<Serie, number>(activeBorderOpacity)\n    const getInactiveBorderOpacity = useSerieDerivedProp<Serie, number>(inactiveBorderOpacity)\n\n    const getNormalStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getFillOpacity(serie),\n            borderWidth: getBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getBorderOpacity(serie),\n        }),\n        [getFillOpacity, getBorderWidth, getBorderColor, getBorderOpacity]\n    )\n    const getActiveStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getActiveFillOpacity(serie),\n            borderWidth: getActiveBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getActiveBorderOpacity(serie),\n        }),\n        [getActiveFillOpacity, getActiveBorderWidth, getBorderColor, getActiveBorderOpacity]\n    )\n    const getInactiveStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getInactiveFillOpacity(serie),\n            borderWidth: getInactiveBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getInactiveBorderOpacity(serie),\n        }),\n        [getInactiveFillOpacity, getInactiveBorderWidth, getBorderColor, getInactiveBorderOpacity]\n    )\n\n    return useCallback(\n        (serie: Serie) => {\n            if (!isInteractive || activeSerieIds.length === 0) return getNormalStyle(serie)\n            if (activeSerieIds.includes(serie.id)) return getActiveStyle(serie)\n            return getInactiveStyle(serie)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeSerieIds]\n    )\n}\n\nexport const useAreaBump = <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n    interpolation,\n    colors,\n    fillOpacity,\n    activeFillOpacity,\n    inactiveFillOpacity,\n    borderWidth,\n    activeBorderWidth,\n    inactiveBorderWidth,\n    borderColor,\n    borderOpacity,\n    activeBorderOpacity,\n    inactiveBorderOpacity,\n    isInteractive,\n    defaultActiveSerieIds,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n    interpolation: AreaBumpCommonProps<Datum, ExtraProps>['interpolation']\n    colors: AreaBumpCommonProps<Datum, ExtraProps>['colors']\n    fillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['fillOpacity']\n    activeFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeFillOpacity']\n    inactiveFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveFillOpacity']\n    borderWidth: AreaBumpCommonProps<Datum, ExtraProps>['borderWidth']\n    activeBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderWidth']\n    inactiveBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderWidth']\n    borderColor: AreaBumpCommonProps<Datum, ExtraProps>['borderColor']\n    borderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['borderOpacity']\n    activeBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderOpacity']\n    inactiveBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderOpacity']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    defaultActiveSerieIds: string[]\n}) => {\n    const [activeSerieIds, setActiveSerieIds] = useState<string[]>(defaultActiveSerieIds)\n\n    const {\n        series: rawSeries,\n        xScale,\n        heightScale,\n    } = useAreaBumpSeries<Datum, ExtraProps>({\n        data,\n        width,\n        height,\n        align,\n        spacing,\n        xPadding,\n    })\n\n    const areaGenerator = useAreaGenerator(interpolation)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const getSerieStyle = useSerieStyle<Datum, ExtraProps>({\n        fillOpacity,\n        activeFillOpacity,\n        inactiveFillOpacity,\n        borderWidth,\n        activeBorderWidth,\n        inactiveBorderWidth,\n        borderColor,\n        borderOpacity,\n        activeBorderOpacity,\n        inactiveBorderOpacity,\n        isInteractive,\n        activeSerieIds,\n    })\n\n    const series: AreaBumpComputedSerie<Datum, ExtraProps>[] = useMemo(\n        () =>\n            rawSeries.map(serie => {\n                const serieWithColor = {\n                    ...serie,\n                    color: getColor(serie.data),\n                }\n\n                return {\n                    ...serieWithColor,\n                    ...getSerieStyle(serieWithColor),\n                }\n            }),\n        [rawSeries, getColor, getSerieStyle]\n    )\n\n    return {\n        series,\n        xScale,\n        heightScale,\n        areaGenerator,\n        activeSerieIds,\n        setActiveSerieIds,\n    }\n}\n\nexport const useAreaBumpSerieHandlers = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    serie,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: AreaBumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: AreaBumpCommonProps<Datum, ExtraProps>['tooltip']\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            setActiveSerieIds([serie.id])\n            onMouseEnter && onMouseEnter(serie, event)\n        },\n        [serie, onMouseEnter, showTooltipFromEvent, setActiveSerieIds, tooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            onMouseMove && onMouseMove(serie, event)\n        },\n        [serie, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setActiveSerieIds([])\n            onMouseLeave && onMouseLeave(serie, event)\n        },\n        [serie, onMouseLeave, hideTooltip, setActiveSerieIds]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            onClick && onClick(serie, event)\n        },\n        [serie, onClick]\n    )\n\n    return useMemo(\n        () => ({\n            onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n            onMouseMove: isInteractive ? handleMouseMove : undefined,\n            onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n            onClick: isInteractive ? handleClick : undefined,\n        }),\n        [isInteractive, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n}\n\nexport const useAreaBumpSeriesLabels = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    series,\n    position,\n    padding,\n    color,\n    getLabel,\n}: {\n    series: AreaBumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<AreaBumpComputedSerie<Datum, ExtraProps>>\n    getLabel: Exclude<AreaBumpLabel<Datum, ExtraProps>, false>\n}): AreaBumpLabelData<Datum, ExtraProps>[] => {\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    return useMemo(() => {\n        let textAnchor: 'start' | 'end'\n        let signedPadding: number\n        if (position === 'start') {\n            textAnchor = 'end'\n            signedPadding = padding * -1\n        } else {\n            textAnchor = 'start'\n            signedPadding = padding\n        }\n\n        return series.map(serie => {\n            let label = serie.id\n            if (typeof getLabel === 'function') {\n                label = getLabel(serie.data)\n            }\n\n            const point =\n                position === 'start' ? serie.points[0] : serie.points[serie.points.length - 1]\n\n            return {\n                id: serie.id,\n                label,\n                x: point.x + signedPadding,\n                y: point.y,\n                color: getColor(serie),\n                opacity: serie.fillOpacity,\n                serie,\n                textAnchor,\n            }\n        })\n    }, [getLabel, series, position, padding, getColor])\n}\n", "import { scalePoint, scaleLinear } from 'd3-scale'\nimport { castPointScale, castLinearScale, ScalePoint, ScaleLinear } from '@nivo/scales'\nimport {\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDataProps,\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n} from './types'\n\nexport const computeSeries = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n}): {\n    series: Omit<\n        AreaBumpComputedSerie<Datum, ExtraProps>,\n        'color' | 'fill' | 'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n    >[]\n    xScale: ScalePoint<Datum['x']>\n    heightScale: ScaleLinear<number>\n} => {\n    const slices = new Map<\n        Datum['x'],\n        {\n            id: Datum['x']\n            total: number\n            x: number\n            values: Map<\n                string,\n                {\n                    serieId: string\n                    value: number\n                    position: number\n                    height: number\n                    beforeHeight: number\n                }\n            >\n        }\n    >()\n\n    let maxSum: number\n    let maxValues: number\n\n    data.forEach(serie => {\n        serie.data.forEach(datum => {\n            if (!slices.has(datum.x)) {\n                slices.set(datum.x, {\n                    id: datum.x,\n                    total: 0,\n                    values: new Map(),\n                    x: 0,\n                })\n            }\n\n            const slice = slices.get(datum.x)!\n\n            const total = slice.total + datum.y\n            slice.total = total\n\n            slice.values.set(serie.id, {\n                serieId: serie.id,\n                value: datum.y,\n                position: 0,\n                height: 0,\n                beforeHeight: 0,\n            })\n\n            if (maxSum === undefined || total > maxSum) {\n                maxSum = total\n            }\n            if (maxValues === undefined || slice.values.size > maxValues) {\n                maxValues = slice.values.size\n            }\n        })\n    })\n\n    const xScale = castPointScale<Datum['x']>(\n        scalePoint<Datum['x']>().domain(Array.from(slices.keys())).range([0, width])\n    )\n\n    const heightScale = castLinearScale<number, number>(\n        scaleLinear<number, number>()\n            .domain([0, maxSum!])\n            .range([0, height - maxValues! * spacing])\n    )\n\n    slices.forEach((slice, x) => {\n        slice.x = xScale(x)!\n        const sliceHeight = heightScale(slice.total) + slice.values.size * spacing\n\n        let offset = 0\n        if (align === 'middle') {\n            offset = (height - sliceHeight) / 2\n        } else if (align === 'end') {\n            offset = height - sliceHeight\n        }\n\n        Array.from(slice.values.values())\n            .sort((a, b) => b.value - a.value)\n            .forEach((value, position, all) => {\n                const previousValues = all.filter((_i, pos) => pos < position)\n                const beforeValue = previousValues.reduce((t, v) => t + v.value, 0)\n\n                const sliceValue = slice.values.get(value.serieId)!\n                sliceValue.position = position\n                sliceValue.height = heightScale(value.value)\n                sliceValue.beforeHeight =\n                    heightScale(beforeValue) + offset + spacing * (previousValues.length + 0.5)\n            })\n    })\n\n    const areaPointPadding = xScale.step() * Math.min(xPadding * 0.5, 0.5)\n\n    const series = data.map(serie => {\n        const computedSerie: Omit<\n            AreaBumpComputedSerie<Datum, ExtraProps>,\n            'color' | 'fill' | 'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n        > = {\n            id: serie.id,\n            data: serie,\n            points: [],\n            areaPoints: [],\n        }\n\n        serie.data.forEach((datum, i) => {\n            const slice = slices.get(datum.x)!\n            const position = slice.values.get(serie.id)!\n\n            const x = slice.x\n            const { beforeHeight, height } = position\n            const y = beforeHeight + height / 2\n            const y0 = beforeHeight\n            const y1 = beforeHeight + height\n\n            computedSerie.points.push({\n                x,\n                y,\n                height,\n                data: { ...datum },\n            })\n            if (i > 0) {\n                computedSerie.areaPoints.push({ x: x - areaPointPadding, y0, y1 })\n            }\n            computedSerie.areaPoints.push({ x, y0, y1 })\n            if (i < serie.data.length - 1) {\n                computedSerie.areaPoints.push({ x: x + areaPointPadding, y0, y1 })\n            }\n        })\n\n        return computedSerie\n    })\n\n    return {\n        series,\n        xScale,\n        heightScale,\n    }\n}\n", "import { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { useAreaBumpSerieHandlers } from './hooks'\nimport {\n    AreaBumpAreaGenerator,\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n} from './types'\n\ninterface AreaProps<Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps> {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n    areaGenerator: AreaBumpAreaGenerator\n    blendMode: AreaBumpCommonProps<Datum, ExtraProps>['blendMode']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: AreaBumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: AreaBumpCommonProps<Datum, ExtraProps>['tooltip']\n}\n\nexport const Area = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    serie,\n    areaGenerator,\n    blendMode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: AreaProps<Datum, ExtraProps>) => {\n    const handlers = useAreaBumpSerieHandlers<Datum, ExtraProps>({\n        serie,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        setActiveSerieIds,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(areaGenerator(serie.areaPoints) || '')\n    const animatedProps = useSpring<{\n        color: string\n        fillOpacity: number\n        stroke: string\n        strokeOpacity: number\n    }>({\n        color: serie.color,\n        fillOpacity: serie.fillOpacity,\n        stroke: serie.borderColor,\n        strokeOpacity: serie.borderOpacity,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            data-testid={`area.${serie.id}`}\n            d={animatedPath}\n            fill={serie.fill ? serie.fill : animatedProps.color}\n            fillOpacity={animatedProps.fillOpacity}\n            stroke={animatedProps.stroke}\n            strokeWidth={serie.borderWidth}\n            strokeOpacity={animatedProps.strokeOpacity}\n            style={{ mixBlendMode: blendMode }}\n            onMouseEnter={handlers.onMouseEnter}\n            onMouseMove={handlers.onMouseMove}\n            onMouseLeave={handlers.onMouseLeave}\n            onClick={handlers.onClick}\n        />\n    )\n}\n", "import { useSprings, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport {\n    AreaBumpComputedSerie,\n    AreaBumpDatum,\n    AreaBumpLabel,\n    AreaBumpSerieExtraProps,\n} from './types'\nimport { useAreaBumpSeriesLabels } from './hooks'\n\ninterface AreaLabelsProps<Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps> {\n    getLabel: Exclude<AreaBumpLabel<Datum, ExtraProps>, false>\n    series: AreaBumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<AreaBumpComputedSerie<Datum, ExtraProps>>\n}\n\nexport const AreasLabels = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    getLabel,\n    series,\n    position,\n    padding,\n    color,\n}: AreaLabelsProps<Datum, ExtraProps>) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = useAreaBumpSeriesLabels<Datum, ExtraProps>({\n        getLabel,\n        series,\n        position,\n        padding,\n        color,\n    })\n\n    const springs = useSprings<{\n        x: number\n        y: number\n        opacity: number\n    }>(\n        labels.length,\n        labels.map(label => ({\n            x: label.x,\n            y: label.y,\n            opacity: label.opacity,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return (\n                    <animated.text\n                        data-testid={`label.${position}.${label.serie.id}`}\n                        key={label.id}\n                        x={animatedProps.x}\n                        y={animatedProps.y}\n                        textAnchor={label.textAnchor}\n                        dominantBaseline=\"central\"\n                        opacity={animatedProps.opacity}\n                        style={{\n                            ...theme.labels.text,\n                            fill: label.color,\n                        }}\n                    >\n                        {label.label}\n                    </animated.text>\n                )\n            })}\n        </>\n    )\n}\n", "import { ModernMotionProps, SvgDefsAndFill } from '@nivo/core'\nimport { AreaBumpCommonProps, AreaBumpComputedSerie, DefaultAreaBumpDatum } from './types'\nimport { AreaTooltip } from './AreaTooltip'\n\nconst commonDefaultProps: Omit<\n    AreaBumpCommonProps<DefaultAreaBumpDatum, Record<string, unknown>>,\n    | 'onMouseEnter'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'onClick'\n    | 'margin'\n    | 'theme'\n    | 'renderWrapper'\n> = {\n    align: 'middle',\n\n    layers: ['grid', 'axes', 'labels', 'areas'],\n\n    interpolation: 'smooth',\n    spacing: 0,\n    xPadding: 0.6,\n\n    colors: { scheme: 'nivo' },\n    blendMode: 'normal',\n    fillOpacity: 0.8,\n    activeFillOpacity: 1,\n    inactiveFillOpacity: 0.15,\n    borderWidth: 1,\n    activeBorderWidth: 1,\n    inactiveBorderWidth: 0,\n    borderColor: { from: 'color', modifiers: [['darker', 0.4]] },\n    borderOpacity: 1,\n    activeBorderOpacity: 1,\n    inactiveBorderOpacity: 0,\n\n    startLabel: false,\n    startLabelPadding: 12,\n    startLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n    endLabel: true,\n    endLabelPadding: 12,\n    endLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    enableGridX: true,\n    axisTop: {},\n    axisBottom: {},\n\n    isInteractive: true,\n    defaultActiveSerieIds: [],\n    tooltip: AreaTooltip,\n\n    role: 'img',\n}\n\nexport const areaBumpSvgDefaultProps: typeof commonDefaultProps &\n    SvgDefsAndFill<AreaBumpComputedSerie<DefaultAreaBumpDatum, Record<string, unknown>>> & {\n        animate: boolean\n        motionConfig: ModernMotionProps['motionConfig']\n    } = {\n    ...commonDefaultProps,\n    defs: [],\n    fill: [],\n    animate: true,\n    motionConfig: 'gentle',\n}\n", "import { BasicTooltip } from '@nivo/tooltip'\nimport { AreaBumpDatum, AreaBumpComputedSerie, AreaBumpSerieExtraProps } from './types'\n\ninterface AreaTooltipProps<\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n> {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n}\n\nexport const AreaTooltip = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    serie,\n}: AreaTooltipProps<Datum, ExtraProps>) => (\n    <BasicTooltip id={serie.id} enableChip={true} color={serie.color} />\n)\n", "import { Fragment, useMemo, ReactNode, createElement } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    SvgWrapper,\n    Container,\n} from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport { useAreaBump } from './hooks'\nimport { Area } from './Area'\nimport { AreasLabels } from './AreasLabels'\nimport {\n    AreaBumpSvgProps,\n    AreaBumpDatum,\n    DefaultAreaBumpDatum,\n    AreaBumpLayerId,\n    AreaBumpCustomLayerProps,\n    AreaBumpSerieExtraProps,\n} from './types'\nimport { areaBumpSvgDefaultProps } from './defaults'\n\ntype InnerAreaBumpProps<\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n> = Omit<\n    AreaBumpSvgProps<Datum, ExtraProps>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerAreaBump = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    data,\n    align = areaBumpSvgDefaultProps.align,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    layers = areaBumpSvgDefaultProps.layers as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['layers']\n    >,\n\n    interpolation = areaBumpSvgDefaultProps.interpolation,\n    spacing = areaBumpSvgDefaultProps.spacing,\n    xPadding = areaBumpSvgDefaultProps.xPadding,\n\n    colors = areaBumpSvgDefaultProps.colors as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['colors']\n    >,\n    blendMode = areaBumpSvgDefaultProps.blendMode,\n    fillOpacity = areaBumpSvgDefaultProps.fillOpacity,\n    activeFillOpacity = areaBumpSvgDefaultProps.activeFillOpacity,\n    inactiveFillOpacity = areaBumpSvgDefaultProps.inactiveFillOpacity,\n    defs = areaBumpSvgDefaultProps.defs,\n    fill = areaBumpSvgDefaultProps.fill as NonNullable<AreaBumpSvgProps<Datum, ExtraProps>['fill']>,\n    borderWidth = areaBumpSvgDefaultProps.borderWidth,\n    activeBorderWidth = areaBumpSvgDefaultProps.activeBorderWidth,\n    inactiveBorderWidth = areaBumpSvgDefaultProps.inactiveBorderWidth,\n    borderColor = areaBumpSvgDefaultProps.borderColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['borderColor']\n    >,\n    borderOpacity = areaBumpSvgDefaultProps.borderOpacity,\n    activeBorderOpacity = areaBumpSvgDefaultProps.activeBorderOpacity,\n    inactiveBorderOpacity = areaBumpSvgDefaultProps.inactiveBorderOpacity,\n\n    startLabel = areaBumpSvgDefaultProps.startLabel as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['startLabel']\n    >,\n    startLabelPadding = areaBumpSvgDefaultProps.startLabelPadding,\n    startLabelTextColor = areaBumpSvgDefaultProps.startLabelTextColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['startLabelTextColor']\n    >,\n    endLabel = areaBumpSvgDefaultProps.endLabel as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['endLabel']\n    >,\n    endLabelPadding = areaBumpSvgDefaultProps.endLabelPadding,\n    endLabelTextColor = areaBumpSvgDefaultProps.endLabelTextColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['endLabelTextColor']\n    >,\n\n    enableGridX = areaBumpSvgDefaultProps.enableGridX,\n    axisTop = areaBumpSvgDefaultProps.axisTop,\n    axisBottom = areaBumpSvgDefaultProps.axisBottom,\n\n    isInteractive = areaBumpSvgDefaultProps.isInteractive,\n    defaultActiveSerieIds = areaBumpSvgDefaultProps.defaultActiveSerieIds,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = areaBumpSvgDefaultProps.tooltip as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['tooltip']\n    >,\n    role = areaBumpSvgDefaultProps.role,\n}: InnerAreaBumpProps<Datum, ExtraProps>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { series, xScale, heightScale, areaGenerator, setActiveSerieIds } = useAreaBump<\n        Datum,\n        ExtraProps\n    >({\n        data,\n        width: innerWidth,\n        height: innerHeight,\n        align,\n        spacing,\n        xPadding,\n        interpolation,\n        colors,\n        fillOpacity,\n        activeFillOpacity,\n        inactiveFillOpacity,\n        borderWidth,\n        activeBorderWidth,\n        inactiveBorderWidth,\n        borderColor,\n        borderOpacity,\n        activeBorderOpacity,\n        inactiveBorderOpacity,\n        isInteractive,\n        defaultActiveSerieIds,\n    })\n\n    const boundDefs = useMemo(\n        () => bindDefs(defs, series, fill, { targetKey: 'fill' }),\n        [defs, series, fill]\n    )\n\n    const layerById: Record<AreaBumpLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        labels: null,\n        areas: null,\n    }\n\n    if (layers.includes('grid') && enableGridX) {\n        layerById.grid = <Grid key=\"grid\" width={innerWidth} height={innerHeight} xScale={xScale} />\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={heightScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                bottom={axisBottom}\n            />\n        )\n    }\n\n    if (layers.includes('areas')) {\n        layerById.areas = (\n            <Fragment key=\"areas\">\n                {series.map(serie => (\n                    <Area<Datum, ExtraProps>\n                        key={serie.id}\n                        areaGenerator={areaGenerator}\n                        serie={serie}\n                        blendMode={blendMode}\n                        isInteractive={isInteractive}\n                        setActiveSerieIds={setActiveSerieIds}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                        tooltip={tooltip}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('labels')) {\n        layerById.labels = (\n            <Fragment key=\"labels\">\n                {startLabel !== false && (\n                    <AreasLabels<Datum, ExtraProps>\n                        getLabel={startLabel}\n                        series={series}\n                        position=\"start\"\n                        padding={startLabelPadding}\n                        color={startLabelTextColor}\n                    />\n                )}\n                {endLabel !== false && (\n                    <AreasLabels<Datum, ExtraProps>\n                        getLabel={endLabel}\n                        series={series}\n                        position=\"end\"\n                        padding={endLabelPadding}\n                        color={endLabelTextColor}\n                    />\n                )}\n            </Fragment>\n        )\n    }\n\n    const customLayerProps: AreaBumpCustomLayerProps<Datum, ExtraProps> = useMemo(\n        () => ({\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n            series,\n            xScale,\n            areaGenerator,\n        }),\n        [innerWidth, innerHeight, outerWidth, outerHeight, series, xScale, areaGenerator]\n    )\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const AreaBump = <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>\n>({\n    isInteractive = areaBumpSvgDefaultProps.isInteractive,\n    animate = areaBumpSvgDefaultProps.animate,\n    motionConfig = areaBumpSvgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: AreaBumpSvgProps<Datum, ExtraProps>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerAreaBump<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport {\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n    AreaBumpSvgProps,\n    DefaultAreaBumpDatum,\n} from './types'\nimport { AreaBump } from './AreaBump'\n\nexport const ResponsiveAreaBump = <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>\n>(\n    props: Omit<AreaBumpSvgProps<Datum, ExtraProps>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <AreaBump<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],
  "mappings": "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",
  "names": ["useSerieDerivedProp", "instruction", "useMemo", "useBump", "o", "width", "height", "data", "interpolation", "xPadding", "xOuterPadding", "yOuterPadding", "lineWidth", "activeLineWidth", "inactiveLineWidth", "colors", "opacity", "activeOpacity", "inactiveOpacity", "pointSize", "activePointSize", "inactivePointSize", "pointColor", "pointBorderWidth", "activePointBorderWidth", "inactivePointBorderWidth", "pointBorderColor", "isInteractive", "defaultActiveSerieIds", "useState", "activeSerieIds", "setActiveSerieIds", "i", "xValuesSet", "Set", "yValuesSet", "forEach", "serie", "datum", "add", "x", "y", "xValues", "Array", "from", "xScale", "castPointScale", "scalePoint", "domain", "range", "padding", "yValues", "sort", "a", "b", "yScale", "linePointPadding", "step", "Math", "min", "series", "map", "rawSerie", "id", "points", "linePoints", "point", "push", "length", "filter", "rawSeries", "lineGenerator", "d3Line", "curve", "curveBasis", "curveLinear", "defined", "d", "getColor", "useOrdinalColorScale", "getSerieStyle", "getLineWidth", "getActiveLineWidth", "getInactiveLineWidth", "getOpacity", "getActiveOpacity", "getInactiveOpacity", "getNormalStyle", "useCallback", "getActiveStyle", "getInactiveStyle", "includes", "color", "theme", "useTheme", "getPointColor", "useInheritedColor", "getPointBorderColor", "getPointStyle", "getSize", "getActiveSize", "getInactiveSize", "getBorderWidth", "getActiveBorderWidth", "getInactiveBorderWidth", "size", "borderWidth", "pts", "rawPoint", "isActive", "isInactive", "borderColor", "useBumpSerieHandlers", "onMouseEnter", "onMouseMove", "onMouseLeave", "onClick", "tooltip", "useTooltip", "showTooltipFromEvent", "hideTooltip", "handleMouseEnter", "event", "createElement", "handleMouseMove", "handleMouseLeave", "handleClick", "undefined", "useBumpSeriesLabels", "position", "getLabel", "textAnchor", "signedPadding", "labels", "label", "pointStyle", "pointerEvents", "bumpSvgDefaultProps", "layers", "scheme", "startLabel", "startLabelPadding", "startLabelTextColor", "endLabel", "endLabelPadding", "endLabelTextColor", "modifiers", "enableGridX", "enableGridY", "axisTop", "axisBottom", "axisLeft", "_jsx", "BasicTooltip", "enableChip", "role", "pointComponent", "useMotionConfig", "animate", "springConfig", "config", "animatedProps", "useSpring", "radius", "immediate", "animated", "circle", "cx", "cy", "r", "to", "v", "max", "fill", "strokeWidth", "stroke", "style", "motionConfig", "Line", "yStep", "handlers", "linePath", "animatedPath", "useAnimatedPath", "_jsxs", "path", "strokeLinecap", "strokeOpacity", "LinesLabels", "springs", "useSprings", "index", "text", "dominantBaseline", "Points", "key", "InnerBump", "partialMargin", "margin", "axisRight", "useDimensions", "innerWidth", "innerHeight", "outerWidth", "outerHeight", "layerById", "grid", "axes", "lines", "Grid", "Axes", "top", "right", "bottom", "left", "Fragment", "customLayerProps", "SvgWrapper", "layer", "Bump", "e", "renderWrapper", "otherProps", "Container", "ResponsiveBump", "props", "ResponsiveWrapper", "useAreaBumpSeries", "align", "spacing", "maxSum", "maxValues", "slices", "Map", "has", "set", "total", "values", "slice", "get", "serieId", "value", "beforeHeight", "keys", "heightScale", "castLinearScale", "scaleLinear", "sliceHeight", "offset", "all", "previousValues", "_i", "pos", "beforeValue", "reduce", "t", "sliceValue", "areaPointPadding", "computedSerie", "areaPoints", "y0", "y1", "useAreaBump", "fillOpacity", "activeFillOpacity", "inactiveFillOpacity", "activeBorderWidth", "inactiveBorderWidth", "borderOpacity", "activeBorderOpacity", "inactiveBorderOpacity", "areaGenerator", "d3Area", "getFillOpacity", "getActiveFillOpacity", "getInactiveFillOpacity", "getBorderColor", "getBorderOpacity", "getActiveBorderOpacity", "getInactiveBorderOpacity", "serieWithColor", "useAreaBumpSerieHandlers", "useAreaBumpSeriesLabels", "Area", "blendMode", "mixBlendMode", "AreasLabels", "areaBumpSvgDefaultProps", "defs", "InnerAreaBump", "boundDefs", "bindDefs", "targetKey", "areas", "AreaBump", "ResponsiveAreaBump"]
}
