{
  "version": 3,
  "sources": ["../../@nivo/legends/src/svg/symbols/SymbolCircle.tsx", "../../@nivo/legends/src/svg/symbols/SymbolDiamond.tsx", "../../@nivo/legends/src/svg/symbols/SymbolSquare.tsx", "../../@nivo/legends/src/svg/symbols/SymbolTriangle.tsx", "../../@nivo/legends/src/defaults.ts", "../../@nivo/legends/src/compute.ts", "../../@nivo/legends/src/svg/ContinuousColorsLegendSvg.tsx", "../../@nivo/legends/src/svg/AnchoredContinuousColorsLegendSvg.tsx", "../../@nivo/legends/src/svg/LegendSvgItem.tsx", "../../@nivo/legends/src/svg/LegendSvg.tsx", "../../@nivo/legends/src/svg/BoxLegendSvg.tsx", "../../@nivo/legends/src/canvas.ts", "../../@nivo/legends/src/hooks.ts", "../../@nivo/legends/src/props.ts"],
  "sourcesContent": ["import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n", "import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n", "import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n", "import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n", "import { ContinuousColorsLegendProps } from './types'\n\nexport const continuousColorsLegendDefaults: {\n    length: NonNullable<ContinuousColorsLegendProps['length']>\n    thickness: NonNullable<ContinuousColorsLegendProps['thickness']>\n    direction: NonNullable<ContinuousColorsLegendProps['direction']>\n    tickPosition: NonNullable<ContinuousColorsLegendProps['tickPosition']>\n    tickSize: NonNullable<ContinuousColorsLegendProps['tickSize']>\n    tickSpacing: NonNullable<ContinuousColorsLegendProps['tickSpacing']>\n    tickOverlap: NonNullable<ContinuousColorsLegendProps['tickOverlap']>\n    tickFormat: NonNullable<ContinuousColorsLegendProps['tickFormat']>\n    titleAlign: NonNullable<ContinuousColorsLegendProps['titleAlign']>\n    titleOffset: NonNullable<ContinuousColorsLegendProps['titleOffset']>\n} = {\n    length: 200,\n    thickness: 16,\n    direction: 'row',\n    tickPosition: 'after',\n    tickSize: 4,\n    tickSpacing: 3,\n    tickOverlap: false,\n    tickFormat: (value: number) => `${value}`,\n    titleAlign: 'start',\n    titleOffset: 4,\n}\n", "import { scaleLinear } from 'd3-scale'\nimport { getValueFormatter } from '@nivo/core'\nimport { computeContinuousColorScaleColorStops } from '@nivo/colors'\nimport {\n    BoxLegendSvgProps,\n    ContinuousColorsLegendProps,\n    LegendAnchor,\n    LegendItemDirection,\n} from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n\nexport const computeContinuousColorsLegend = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    // left to right for `row`, bottom to top for `column`\n    const domain = direction === 'column' ? [...scale.domain()].reverse() : scale.domain()\n\n    const positionScale = scaleLinear().domain(domain)\n    if (domain.length === 2) {\n        // sequential, quantize\n        positionScale.range([0, length])\n    } else if (domain.length === 3) {\n        // diverging\n        positionScale.range([0, length / 2, length])\n    }\n\n    let values: number[]\n    if ('thresholds' in scale) {\n        // quantize\n        values = [domain[0], ...scale.thresholds(), domain[1]]\n    } else {\n        // sequential, diverging\n        values = Array.isArray(ticks) ? ticks : (scale as any).ticks(ticks)\n    }\n\n    const colorStops = computeContinuousColorScaleColorStops(scale, 32)\n\n    const formatValue = getValueFormatter(tickFormat)\n\n    const computedTicks: {\n        x1: number\n        y1: number\n        x2: number\n        y2: number\n        text: string\n        textX: number\n        textY: number\n        textHorizontalAlign: 'start' | 'middle' | 'end'\n        textVerticalAlign: 'alphabetic' | 'central' | 'hanging'\n    }[] = []\n\n    let width: number\n    let height: number\n\n    const gradientX1 = 0\n    let gradientY1 = 0\n    let gradientX2 = 0\n    const gradientY2 = 0\n\n    let titleX: number\n    let titleY: number\n    let titleRotation: number\n    let titleVerticalAlign: 'alphabetic' | 'hanging'\n\n    if (direction === 'row') {\n        width = length\n        height = thickness\n\n        gradientX2 = 1\n\n        let y1: number\n        let y2: number\n\n        let textY: number\n        const textHorizontalAlign = 'middle'\n        let textVerticalAlign: 'alphabetic' | 'hanging'\n\n        titleRotation = 0\n        if (titleAlign === 'start') {\n            titleX = 0\n        } else if (titleAlign === 'middle') {\n            titleX = length / 2\n        } else {\n            titleX = length\n        }\n\n        if (tickPosition === 'before') {\n            y1 = -tickSize\n            y2 = tickOverlap ? thickness : 0\n\n            textY = -tickSize - tickSpacing\n            textVerticalAlign = 'alphabetic'\n\n            titleY = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            y1 = tickOverlap ? 0 : thickness\n            y2 = thickness + tickSize\n\n            textY = y2 + tickSpacing\n            textVerticalAlign = 'hanging'\n\n            titleY = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const x = positionScale(value)\n\n            computedTicks.push({\n                x1: x,\n                y1,\n                x2: x,\n                y2,\n                text: formatValue(value),\n                textX: x,\n                textY,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    } else {\n        width = thickness\n        height = length\n\n        gradientY1 = 1\n\n        let x1: number\n        let x2: number\n\n        let textX: number\n        let textHorizontalAlign: 'start' | 'end'\n        const textVerticalAlign = 'central'\n\n        titleRotation = -90\n        if (titleAlign === 'start') {\n            titleY = length\n        } else if (titleAlign === 'middle') {\n            titleY = length / 2\n        } else {\n            titleY = 0\n        }\n\n        if (tickPosition === 'before') {\n            x1 = -tickSize\n            x2 = tickOverlap ? thickness : 0\n\n            textX = x1 - tickSpacing\n            textHorizontalAlign = 'end'\n\n            titleX = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            x1 = tickOverlap ? 0 : thickness\n            x2 = thickness + tickSize\n\n            textX = x2 + tickSpacing\n            textHorizontalAlign = 'start'\n\n            titleX = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const y = positionScale(value)\n\n            computedTicks.push({\n                x1,\n                y1: y,\n                x2,\n                y2: y,\n                text: formatValue(value),\n                textX,\n                textY: y,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    }\n\n    return {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks: computedTicks,\n        titleText: title,\n        titleX,\n        titleY,\n        titleRotation,\n        titleHorizontalAlign: titleAlign,\n        titleVerticalAlign,\n    }\n}\n", "import { Fragment } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { computeContinuousColorsLegend } from '../compute'\nimport { ContinuousColorsLegendProps } from '../types'\nimport { continuousColorsLegendDefaults } from '../defaults'\n\nexport const ContinuousColorsLegendSvg = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        ticks: computedTicks,\n        colorStops,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const theme = useTheme()\n\n    const id = `ContinuousColorsLegendSvgGradient.${direction}.${colorStops\n        .map(stop => stop.offset)\n        .join('_')}`\n\n    return (\n        <g>\n            <defs>\n                <linearGradient\n                    id={id}\n                    x1={gradientX1}\n                    y1={gradientY1}\n                    x2={gradientX2}\n                    y2={gradientY2}\n                >\n                    {colorStops.map(colorStop => (\n                        <stop {...colorStop} />\n                    ))}\n                </linearGradient>\n            </defs>\n            {titleText && (\n                <text\n                    transform={`translate(${titleX}, ${titleY}) rotate(${titleRotation})`}\n                    textAnchor={titleHorizontalAlign}\n                    dominantBaseline={titleVerticalAlign}\n                    style={theme.legends.title.text}\n                >\n                    {titleText}\n                </text>\n            )}\n            <rect width={width} height={height} fill={`url(#${id}`} />\n            {computedTicks.map((tick, index) => (\n                <Fragment key={index}>\n                    <line\n                        x1={tick.x1}\n                        y1={tick.y1}\n                        x2={tick.x2}\n                        y2={tick.y2}\n                        style={theme.legends.ticks.line}\n                    />\n                    <text\n                        x={tick.textX}\n                        y={tick.textY}\n                        textAnchor={tick.textHorizontalAlign}\n                        dominantBaseline={tick.textVerticalAlign}\n                        style={theme.legends.ticks.text}\n                    >\n                        {tick.text}\n                    </text>\n                </Fragment>\n            ))}\n        </g>\n    )\n}\n", "import { AnchoredContinuousColorsLegendProps } from '../types'\nimport { computePositionFromAnchor } from '../compute'\nimport { continuousColorsLegendDefaults } from '../defaults'\nimport { ContinuousColorsLegendSvg } from './ContinuousColorsLegendSvg'\n\nexport const AnchoredContinuousColorsLegendSvg = ({\n    containerWidth,\n    containerHeight,\n    anchor,\n    translateX = 0,\n    translateY = 0,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    ...legendProps\n}: AnchoredContinuousColorsLegendProps) => {\n    let width: number\n    let height: number\n    if (direction === 'row') {\n        width = length\n        height = thickness\n    } else {\n        width = thickness\n        height = length\n    }\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <g transform={`translate(${x}, ${y})`}>\n            <ContinuousColorsLegendSvg\n                length={length}\n                thickness={thickness}\n                direction={direction}\n                {...legendProps}\n            />\n        </g>\n    )\n}\n", "import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n", "import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n", "import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n", "import { CompleteTheme, degreesToRadians } from '@nivo/core'\nimport {\n    computeDimensions,\n    computePositionFromAnchor,\n    computeItemLayout,\n    computeContinuousColorsLegend,\n} from './compute'\nimport { AnchoredContinuousColorsLegendProps, LegendCanvasProps } from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n\nexport const renderContinuousColorLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        containerWidth,\n        containerHeight,\n        anchor,\n        translateX = 0,\n        translateY = 0,\n        scale,\n        length = continuousColorsLegendDefaults.length,\n        thickness = continuousColorsLegendDefaults.thickness,\n        direction = continuousColorsLegendDefaults.direction,\n        ticks: _ticks,\n        tickPosition = continuousColorsLegendDefaults.tickPosition,\n        tickSize = continuousColorsLegendDefaults.tickSize,\n        tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n        tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n        tickFormat = continuousColorsLegendDefaults.tickFormat,\n        title,\n        titleAlign = continuousColorsLegendDefaults.titleAlign,\n        titleOffset = continuousColorsLegendDefaults.titleOffset,\n        theme,\n    }: AnchoredContinuousColorsLegendProps & {\n        theme: CompleteTheme\n    }\n) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks: _ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const initialStyles = {\n        font: ctx.font,\n        textAlign: ctx.textAlign,\n        textBaseline: ctx.textBaseline,\n    }\n    ctx.save()\n\n    ctx.translate(x, y)\n\n    const gradient = ctx.createLinearGradient(\n        gradientX1 * width,\n        gradientY1 * height,\n        gradientX2 * width,\n        gradientY2 * height\n    )\n    colorStops.forEach(colorStop => {\n        gradient.addColorStop(colorStop.offset, colorStop.stopColor)\n    })\n\n    ctx.fillStyle = gradient\n    ctx.fillRect(0, 0, width, height)\n\n    ctx.font = `${\n        theme.legends.ticks.text.fontWeight ? `${theme.legends.ticks.text.fontWeight} ` : ''\n    }${theme.legends.ticks.text.fontSize}px ${theme.legends.ticks.text.fontFamily}`\n\n    ticks.forEach(tick => {\n        if ((theme.legends.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n            ctx.lineCap = 'square'\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x1, tick.y1)\n            ctx.lineTo(tick.x2, tick.y2)\n            ctx.stroke()\n        }\n\n        if (theme.legends.ticks.text.fill) {\n            ctx.fillStyle = theme.legends.ticks.text.fill\n        }\n        ctx.textAlign = tick.textHorizontalAlign === 'middle' ? 'center' : tick.textHorizontalAlign\n        ctx.textBaseline = tick.textVerticalAlign === 'central' ? 'middle' : tick.textVerticalAlign\n\n        ctx.fillText(tick.text, tick.textX, tick.textY)\n    })\n\n    if (titleText) {\n        ctx.save()\n        ctx.translate(titleX, titleY)\n        ctx.rotate(degreesToRadians(titleRotation))\n\n        ctx.font = `${\n            theme.legends.title.text.fontWeight ? `${theme.legends.title.text.fontWeight} ` : ''\n        }${theme.legends.title.text.fontSize}px ${theme.legends.title.text.fontFamily}`\n        if (theme.legends.title.text.fill) {\n            ctx.fillStyle = theme.legends.title.text.fill\n        }\n        ctx.textAlign = titleHorizontalAlign === 'middle' ? 'center' : titleHorizontalAlign\n        ctx.textBaseline = titleVerticalAlign\n\n        ctx.fillText(titleText, 0, 0)\n\n        ctx.restore()\n    }\n\n    ctx.restore()\n\n    ctx.font = initialStyles.font\n    ctx.textAlign = initialStyles.textAlign\n    ctx.textBaseline = initialStyles.textBaseline\n}\n", "import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n\n        if (reverse) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse, separator, valueFormat])\n}\n", "import PropTypes from 'prop-types'\n\n/**\n * The prop type is exported as a simple object instead of `PropTypes.shape`\n * to be able to add extra properties.\n *\n * @example\n * ```javascript\n * import { LegendPropShape } from '@nivo/legends'\n *\n * const customLegendPropType = PropTypes.shape({\n *     ...LegendPropShape,\n *     extra: PropTypes.any.isRequired,\n * })\n * ```\n */\nexport const LegendPropShape = {\n    data: PropTypes.arrayOf(PropTypes.object),\n\n    // position & layout\n    anchor: PropTypes.oneOf([\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n        'top-left',\n        'center',\n    ]).isRequired,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    direction: PropTypes.oneOf(['row', 'column']).isRequired,\n\n    // item\n    itemsSpacing: PropTypes.number,\n    itemWidth: PropTypes.number.isRequired,\n    itemHeight: PropTypes.number.isRequired,\n    itemDirection: PropTypes.oneOf([\n        'left-to-right',\n        'right-to-left',\n        'top-to-bottom',\n        'bottom-to-top',\n    ]),\n    itemTextColor: PropTypes.string,\n    itemBackground: PropTypes.string,\n    itemOpacity: PropTypes.number,\n\n    symbolShape: PropTypes.oneOfType([\n        PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']),\n        PropTypes.func,\n    ]),\n    symbolSize: PropTypes.number,\n    symbolSpacing: PropTypes.number,\n    symbolBorderWidth: PropTypes.number,\n    symbolBorderColor: PropTypes.string,\n\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n\n    effects: PropTypes.arrayOf(\n        PropTypes.shape({\n            on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n            style: PropTypes.shape({\n                itemTextColor: PropTypes.string,\n                itemBackground: PropTypes.string,\n                itemOpacity: PropTypes.number,\n                symbolSize: PropTypes.number,\n                symbolBorderWidth: PropTypes.number,\n                symbolBorderColor: PropTypes.string,\n            }).isRequired,\n        })\n    ),\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;IAEaA,IAAe,SAAAC,IAAA;AAAA,MACxBC,IAAAA,GAAAA,GACAC,IAAAA,GAAAA,GACAC,IAAAA,GAAAA,MACAC,IAAAA,GAAAA,MAAAA,IAAAA,GACAC,SAAAA,KAAAA,WAAAA,IAAU,IAAA,GAAAC,KAAAN,GACVO,aAAAA,KAAAA,WAAAA,KAAc,IAAAD,IAAAE,KAAAR,GACdS;AAAAA,aAGIC,mBAAAA,KAAAA,UAAAA,EACIC,GAAGR,IAAO,GACVS,IAAIX,IAAIE,IAAO,GACfU,IAAIX,IAAIC,IAAO,GACfC,MAAMA,GACNC,SAASA,IACTS,aAAaP,IACbQ,QAAAA,WAAAA,KAVM,gBAAAP,IAWNQ,OAAO,EACHC,eAAe,OAAA,EAAA,CAAA;AAAA;ICnBlBC,IAAgB,SAAAlB,IAAA;AAAA,MACzBC,IAAAA,GAAAA,GACAC,IAAAA,GAAAA,GACAC,IAAAA,GAAAA,MACAC,IAAAA,GAAAA,MAAAA,IAAAA,GACAC,SAAAA,KAAAA,WAAAA,IAAU,IAAA,GAAAC,KAAAN,GACVO,aAAAA,KAAAA,WAAAA,KAAc,IAAAD,IAAAE,KAAAR,GACdS;AAAAA,aAGIC,mBAAAA,KAAAA,KAAAA,EAAGS,WAAAA,eAAwBlB,IAAAA,MAAKC,IAAAA,KAAAA,cAC5BQ,mBAAAA,KAAAA,QAAAA,EACIF,GAAAA,4BACOL,IAAO,IAAA,8BACA,MAAPA,IAAAA,MAAcA,IAAO,IAAA,4BACrBA,IAAO,IAAA,MAAKA,IAAAA,4BACL,MAAPA,IAAAA,MAAcA,IAAO,IAAA,4BACrBA,IAAO,IAAA,wBAEdC,MAAMA,GACNC,SAASA,IACTS,aAAaP,IACbQ,QAAAA,WAAAA,KAfE,gBAAAP,IAgBFQ,OAAO,EACHC,eAAe,OAAA,EAAA,CAAA,EAAA,CAAA;AAAA;ICxBtBG,IAAe,SAAApB,IAAA;AAAA,MACxBC,IAAAA,GAAAA,GACAC,IAAAA,GAAAA,GACAC,IAAAA,GAAAA,MACAC,IAAAA,GAAAA,MAAAA,IAAAA,GACAC,SAAAA,KAAAA,WAAAA,IAAU,IAAA,GAAAC,KAAAN,GACVO,aAAAA,KAAAA,WAAAA,KAAc,IAAAD,IAAAE,KAAAR,GACdS;AAAAA,aAGIC,mBAAAA,KAAAA,QAAAA,EACIT,GAAGA,GACHC,GAAGA,GACHE,MAAMA,GACNC,SAASA,IACTS,aAAaP,IACbQ,QAAAA,WAAAA,KATM,gBAAAP,IAUNa,OAAOlB,GACPmB,QAAQnB,GACRa,OAAO,EACHC,eAAe,OAAA,EAAA,CAAA;AAAA;ICpBlBM,IAAiB,SAAAvB,IAAA;AAAA,MAC1BC,IAAAA,GAAAA,GACAC,IAAAA,GAAAA,GACAC,IAAAA,GAAAA,MACAC,IAAAA,GAAAA,MAAAA,IAAAA,GACAC,SAAAA,KAAAA,WAAAA,IAAU,IAAA,GAAAC,KAAAN,GACVO,aAAAA,KAAAA,WAAAA,KAAc,IAAAD,IAAAE,KAAAR,GACdS;AAAAA,aAGIC,mBAAAA,KAAAA,KAAAA,EAAGS,WAAAA,eAAwBlB,IAAAA,MAAKC,IAAAA,KAAAA,cAC5BQ,mBAAAA,KAAAA,QAAAA,EACIF,GAAAA,wBACGL,IAAO,IAAA,0BACPA,IAAAA,MAAQA,IAAAA,0BACNA,IAAAA,wBACFA,IAAO,IAAA,oBAEVC,MAAMA,GACNC,SAASA,IACTS,aAAaP,IACbQ,QAAAA,WAAAA,KAdE,gBAAAP,IAeFQ,OAAO,EACHC,eAAe,OAAA,EAAA,CAAA,EAAA,CAAA;AAAA;AAAA,SAAA,IAAA;AAAA,SAAA,IAAA,OAAA,UAAA,SAAAO,IAAA;AAAA,aAAAxB,KAAA,GAAAA,KAAA,UAAA,QAAAA,MAAA;AAAA,UAAA,IAAA,UAAAA;AAAA,eAAA,KAAA;AAAA,eAAA,UAAA,eAAA,KAAA,GAAA,CAAA,MAAAwB,GAAA,KAAA,EAAA;IAAA;AAAA,WAAAA;EAAA,GAAA,EAAA,MAAA,MAAA,SAAA;AAAA;AAAA,IEX7BC,IAAc,EAChBC,KAAK,GACLC,OAAO,GACPC,QAAQ,GACRC,MAAM,EAAA;AFOyB,IEJtBC,IAAoB,SAAAC,IAAA;AAAA,MAVZC,IAWjBC,IAAAA,GAAAA,WACAC,IAAAA,GAAAA,cACSC,IAAAA,GAATC,SACAC,IAAAA,GAAAA,WACAC,IAAAA,GAAAA,WACAC,KAAAA,GAAAA;AAAAA,MAGwB,YAAA,OAAbJ,MAlBK,YAAA,QADCH,KAmB6BG,MAlBjBK,MAAMC,QAAQT,EAAAA,KAAkB,SAATA;AAAAA,UAmB1C,IAAIU,MAAM,0DAAA;AAAA,MAGdN,KACkB,YAAA,OAAbD,IACD,EACIT,KAAKS,GACLR,OAAOQ,GACPP,QAAQO,GACRN,MAAMM,EAAAA,IAAAA,EAAAA,CAAAA,GAGHV,GACAU,CAAAA,GAGXQ,KAAoBP,GAAQP,OAAOO,GAAQT,OAC3CiB,KAAkBR,GAAQV,MAAMU,GAAQR,QAC1CiB,KAAQP,IAAYK,IACpBG,KAASP,KAAaK,IACpBG,MAAWV,IAAY,KAAKH;AAAAA,SAChB,UAAdD,IACAY,KAAQP,IAAYD,IAAYU,KAAUJ,KACrB,aAAdV,MACPa,KAASP,KAAaF,IAAYU,KAAUH,KAGzC,EAAEC,OAAAA,IAAOC,QAAAA,IAAQV,SAAAA,GAAAA;AAAAA;AFjCO,IEoCtBY,IAA4B,SAAAjB,IAAA;AAAA,MACrCkB,KAAAA,GAAAA,QACAC,IAAAA,GAAAA,YACAC,IAAAA,GAAAA,YACAC,IAAAA,GAAAA,gBACAC,IAAAA,GAAAA,iBACAR,IAAAA,GAAAA,OACAC,KAAAA,GAAAA,QAKIQ,KAAIJ,GACJK,KAAIJ;AAAAA,UAEAF,IAAAA;IAAAA,KACC;AACDK,MAAAA,OAAMF,IAAiBP,KAAS;AAAA;IAAA,KAG/B;AACDS,MAAAA,MAAKF,IAAiBP;AAAAA;IAAAA,KAGrB;AACDS,MAAAA,MAAKF,IAAiBP,GACtBU,OAAMF,IAAkBP,MAAU;AAAA;IAAA,KAGjC;AACDQ,MAAAA,MAAKF,IAAiBP,GACtBU,MAAKF,IAAkBP;AAAAA;IAAAA,KAGtB;AACDQ,MAAAA,OAAMF,IAAiBP,KAAS,GAChCU,MAAKF,IAAkBP;AAAAA;IAAAA,KAGtB;AACDS,MAAAA,MAAKF,IAAkBP;AAAAA;IAAAA,KAGtB;AACDS,MAAAA,OAAMF,IAAkBP,MAAU;AAAA;IAAA,KAGjC;AACDQ,MAAAA,OAAMF,IAAiBP,KAAS,GAChCU,OAAMF,IAAkBP,MAAU;EAAA;AAAA,SAInC,EAAEQ,GAAAA,IAAGC,GAAAA,GAAAA;AAAAA;AFzFmB,IE4FtBC,IAAoB,SAAAzB,IAAA;AAAA,MAWzB0B,IACAC,GAEAC,GACAC,GACAC,GACAC,GAhBJ7B,KAAAA,GAAAA,WACA8B,KAAAA,GAAAA,SACAC,KAAAA,GAAAA,YACAC,KAAAA,GAAAA,eACApB,KAAAA,GAAAA,OACAC,KAAAA,GAAAA;AAAAA,UAaQb,IAAAA;IAAAA,KACC;AACDwB,MAAAA,KAAU,GACVC,KAAWZ,KAASkB,MAAc,GAElCJ,IAASd,KAAS,GAClBgB,IAAiB,WACbC,MACAJ,IAASd,IACTgB,IAAc,UAEdF,IAASK,KAAaC,IACtBJ,IAAc;AAAA;IAAA,KAIjB;AACDJ,MAAAA,KAAUZ,KAAQmB,IAClBN,KAAWZ,KAASkB,MAAc,GAElCJ,IAASd,KAAS,GAClBgB,IAAiB,WACbC,MACAJ,IAAS,GACTE,IAAc,YAEdF,IAASd,KAAQmB,KAAaC,IAC9BJ,IAAc;AAAA;IAAA,KAIjB;AACDJ,MAAAA,MAAWZ,KAAQmB,MAAc,GACjCN,IAAU,GAEVC,IAASd,KAAQ,GAEjBgB,IAAc,UACVE,MACAH,IAASd,IACTgB,IAAiB,iBAEjBF,IAASI,KAAaC,IACtBH,IAAiB;AAAA;IAAA,KAIpB;AACDL,MAAAA,MAAWZ,KAAQmB,MAAc,GACjCN,IAAUZ,KAASkB,IAEnBL,IAASd,KAAQ,GACjBgB,IAAc,UACVE,MACAH,IAAS,GACTE,IAAiB,uBAEjBF,IAASd,KAASkB,KAAaC,IAC/BH,IAAiB;EAAA;AAAA,SAKtB,EACHL,SAAAA,IACAC,SAAAA,GACAC,QAAAA,GACAC,QAAAA,GACAC,aAAAA,GACAC,gBAAAA,EAAAA;AAAAA;AFpL2B,IKT7BI,IAAgB,EAClBC,QAAQC,GACRC,SAASC,GACTC,QAAQC,GACRC,UAAUC,EAAAA;ALKqB,IKFtBC,IAAgB,SAAA,GAAA;AAAA,MAAA,GAAA,GAAA,GAAAC,IAAAC,IAAAC,IAAAC,IAAAC,IAAAC,IAAAC,IAAA,GACzBC,KAAAA,EAAAA,GACAC,KAAAA,EAAAA,GACAC,KAAAA,EAAAA,OACAC,IAAAA,EAAAA,QACAC,IAAAA,EAAAA,MAAAA,IAAAA,EACAC,WAAAA,IAAAA,WAAAA,IAAY,kBAAA,GAAAC,KAAA,EACZC,SAAAA,KAAAA,WAAAA,MAAAA,IACAC,KAAAA,EAAAA,WAAAA,KAAAA,EACAC,YAAAA,KAAAA,WAAAA,KAAa,gBAAAC,IAAA,IAAA,EACbC,SAAAA,IAAAA,WAAAA,IAAU,IAAA,GAAAC,KAAA,EAEVC,aAAAA,IAAAA,WAAAA,KAAc,WAAAD,IAAA,IAAA,EACdE,YAAAA,IAAAA,WAAAA,IAAa,KAAA,GAAA,IAAA,EACbC,eAAAA,IAAAA,WAAAA,IAAgB,IAAA,GAAA,IAAA,EAChBC,mBAAAA,IAAAA,WAAAA,IAAoB,IAAA,GAAA,IAAA,EACpBC,mBAAAA,IAAAA,WAAAA,IAAoB,gBAAA,GAEpBC,IAAAA,EAAAA,SACAC,IAAAA,EAAAA,cACAC,IAAAA,EAAAA,cACAC,IAAAA,EAAAA,aAEAC,IAAAA,EAAAA,SAAAA,QAE0BC,aAAAA,UAAgB,CAAA,CAAA,GAAnCC,IAAAA,EAAAA,IAAOC,IAAAA,EAAAA,IACRC,IAAQC,GAAAA,GAERC,SAAmBC,aAAAA,aACrB,SAACC,IAAAA;AAAAA,QACOR,GAAS;AAAA,UAEHE,KADeF,EAAQS,OAAO,SAAAC,IAAA;AAAA,eAAmB,YAAAA,GAAhBC;MAAAA,CAAAA,EACZC,OACvB,SAACC,IAAKC,IAAAA;AAAAA,eAAAA,EAAAA,CAAAA,GACCD,IACAC,GAAOZ,KAAAA;MAAAA,GAEd,CAAA,CAAA;AAEJC,QAASD,EAAAA;IAAAA;AAAAA,YAGbL,KAAAA,EAAef,GAAM0B,EAAAA;EAAAA,GAEzB,CAACX,GAAcf,GAAMkB,CAAAA,CAAAA,GAEnBe,SAAmBR,aAAAA,aACrB,SAACC,IAAAA;AAAAA,QACOR,GAAS;AAAA,UAEHE,KADeF,EAAQS,OAAO,SAAAC,IAAA;AAAA,eAAmB,YAAAA,GAAhBC;MAAAA,CAAAA,EACZC,OACvB,SAACC,IAAKC,IAAAA;AAAAA,eAAAA,EAAAA,CAAAA,GACCD,IACAC,GAAOZ,KAAAA;MAAAA,GAEd,CAAA,CAAA;AAEJC,QAASD,EAAAA;IAAAA;AAAAA,YAGbJ,KAAAA,EAAehB,GAAM0B,EAAAA;EAAAA,GAEzB,CAACV,GAAchB,GAAMkB,CAAAA,CAAAA,GAAAA,KAGiDgB,EAAkB,EACxFjC,WAAAA,GACAE,SAAAA,IACAO,YAAAA,SAAAA,IAAYU,EAAMV,cAAAA,IAAcA,GAChCC,eAAAA,GACAb,OAAAA,IACAC,QAAAA,EAAAA,CAAAA,GANIoC,KAAAA,GAAAA,SAASC,KAAAA,GAAAA,SAASC,KAAAA,GAAAA,QAAQC,KAAAA,GAAAA,QAAQC,KAAAA,GAAAA,aAAaC,KAAAA,GAAAA,gBASjDC,KAAgB,CAAC3B,GAASC,GAAcC,GAAcC,CAAAA,EAAayB,KACrE,SAAAC,IAAAA;AAAAA,WAAAA,WAAWA;EAAAA,CAAAA,GAGTC,KAAqC,cAAA,OAAhBnC,IAA6BA,IAAc9B,EAAc8B;AAAAA,aAGhFoC,mBAAAA,MAAAA,KAAAA,EACIC,WAAAA,eAAwBlD,KAAAA,MAAKC,KAAAA,KAC7BuB,OAAO,EACHb,SAAAA,SAAAA,IAASa,EAAM2B,eAAAA,IAAexC,EAAAA,GAAAA,UAAAA,KAGlCyC,mBAAAA,KAAAA,QAAAA,EACIlD,OAAOA,IACPC,QAAQA,GACRkD,MAAAA,SAAAA,IAAM7B,EAAM8B,kBAAAA,IAAkB7C,IAC9Be,OAAO,EACH+B,QAAQV,KAAgB,YAAY,OAAA,GAExC3B,SAAS,SAAAY,IAAAA;AAAAA,YACLZ,KAAAA,EAAUd,GAAM0B,EAAAA,GAAAA,QAChBT,KAAAA,EAAcjB,EAAKoD,EAAAA;EAAAA,GAEvBrC,cAAcS,IACdR,cAAciB,GAAAA,CAAAA,GAEXoB,gBAAcT,IAAAA,EAAAA,EACjBQ,IAAIpD,EAAKoD,IACTxD,GAAGuC,IACHtC,GAAGuC,IACHkB,MAAAA,SAAAA,KAAMlC,EAAMV,cAAAA,KAAcA,GAC1BuC,MAAAA,SAAAA,KAAAA,SAAAA,KAAMjD,EAAKiD,QAAAA,KAAQjD,EAAKuD,SAAAA,KAAS,SACjCC,aAAAA,SAAAA,KAAapC,EAAMR,qBAAAA,KAAqBA,GACxC6C,aAAAA,SAAAA,KAAarC,EAAMP,qBAAAA,KAAqBA,EAAAA,GACpCb,EAAK0D,SAASpC,EAAMqC,QAAQD,OAAOE,SAAAA,MAASC,CAAAA,OAEpDb,mBAAAA,KAAAA,QAAAA,EACIc,YAAYvB,IACZnB,OAAAA,EAAAA,CAAAA,GACOE,EAAMqC,QAAQI,MAAAA,EACjBd,MAAAA,SAAAA,KAAAA,SAAAA,KAAAA,SAAAA,IAAM7B,EAAM4C,iBAAAA,IAAiB5D,MAAAA,KAAakB,EAAMqC,QAAQI,KAAKd,QAAAA,KAAQ,SACrEgB,kBAAkBzB,IAClB0B,eAAe,QACfC,YAAY,OAAA,GACRnE,EAAK0D,SAASpC,EAAMqC,QAAQD,OAAOK,OAAAA,MAAOF,GAElDjE,GAAGyC,IACHxC,GAAGyC,IAAAA,UAEFtC,EAAKoE,MAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA;AL1Ha,IMrBtBC,IAAY,SAAAC,IAAA;AAAA,MACrBtE,IAAAA,GAAAA,MAEAJ,IAAAA,GAAAA,GACAC,IAAAA,GAAAA,GACAI,IAAAA,GAAAA,WAAAA,IAAAA,GACAsE,SAASC,KAAAA,WAAAA,IAAW,IAAA,GACpBrE,KAAAA,GAAAA,SACAe,KAAAA,GAAAA,SAEAuD,KAAAA,GAAAA,WACAC,KAAAA,GAAAA,YAAAA,KAAAA,GACAC,eAAAA,KAAAA,WAAAA,KAAgB,kBAAApF,IAAAE,KAAA6E,GAChBM,cAAAA,KAAAA,WAAAA,KAAe,IAAAnF,IACfuE,KAAAA,GAAAA,eAAAA,KAAAA,GACAd,gBAAAA,IAAAA,WAAAA,KAAiB,gBAAA2B,IAAAC,KAAAR,GACjBvB,aAAAA,KAAAA,WAAAA,KAAc,IAAA+B,IAEdrE,KAAAA,GAAAA,aACAC,IAAAA,GAAAA,YACAC,IAAAA,GAAAA,eACAC,IAAAA,GAAAA,mBACAC,IAAAA,GAAAA,mBAEAC,KAAAA,GAAAA,SACAC,KAAAA,GAAAA,cACAC,KAAAA,GAAAA,cACAC,KAAAA,GAAAA,aAEQsD,KAAYQ,EAAkB,EAClCC,WAAWhF,EAAKiF,QAChBR,WAAAA,IACAC,YAAAA,IACAE,cAAAA,IACA3E,WAAAA,GACAsE,SAASC,GAAAA,CAAAA,EANLD,SASFW,IAAsB,UAAdjF,IAAsBwE,KAAYG,KAAe,GACzDO,IAAsB,aAAdlF,IAAyByE,KAAaE,KAAe;AAAA,aAG/D5B,mBAAAA,KAAAA,KAAAA,EAAGF,WAAAA,eAAwBlD,IAAAA,MAAKC,IAAAA,KAAAA,UAC3BG,EAAKoF,IAAI,SAACpF,IAAMqF,IAAAA;AAAAA,eACbrC,mBAAAA,KAAC5D,GAAAA,EAEGY,MAAMA,IACNJ,GAAGyF,KAAIH,IAAQX,GAAQe,MACvBzF,GAAGwF,KAAIF,IAAQZ,GAAQgB,KACvBzF,OAAO2E,IACP1E,QAAQ2E,IACRzE,WAAW0E,IACXxE,SAASA,IACTe,SAASA,IACTd,WAAW4D,IACX3D,YAAY6C,GACZ3C,SAASwC,IACTtC,aAAaA,IACbC,YAAYA,GACZC,eAAeA,GACfC,mBAAmBA,GACnBC,mBAAmBA,GACnBC,SAASA,IACTC,cAAcA,IACdC,cAAcA,IACdC,aAAaA,GAAAA,GApBRoE,EAAAA;EAAAA,CAAAA,EAAAA,CAAAA;AAAAA;ANxBU,IOrBtBG,IAAe,SAAAlB,IAAA;AAAA,MACxBtE,IAAAA,GAAAA,MAEAyF,IAAAA,GAAAA,gBACAC,IAAAA,GAAAA,iBAAAA,IAAAA,GACAC,YAAAA,IAAAA,WAAAA,IAAa,IAAA,GAAAC,KAAAtB,GACbuB,YAAAA,KAAAA,WAAAA,KAAa,IAAAD,IACbE,KAAAA,GAAAA,QACA7F,KAAAA,GAAAA,WAAAA,KAAAA,GACAsE,SAAAA,KAAAA,WAAAA,KAAU,IAAAjF,IACVa,KAAAA,GAAAA,SAAAA,KAAAA,GAEAyE,cAAAA,KAAAA,WAAAA,KAAe,IAAAnF,IACfgF,KAAAA,GAAAA,WACAC,KAAAA,GAAAA,YACAC,IAAAA,GAAAA,eACAX,KAAAA,GAAAA,eACAd,KAAAA,GAAAA,gBACAH,IAAAA,GAAAA,aAEAtC,IAAAA,GAAAA,aACAC,IAAAA,GAAAA,YACAC,IAAAA,GAAAA,eACAC,KAAAA,GAAAA,mBACAC,KAAAA,GAAAA,mBAEAC,KAAAA,GAAAA,SACAC,KAAAA,GAAAA,cACAC,KAAAA,GAAAA,cACAC,IAAAA,GAAAA,aAEAC,IAAAA,GAAAA,SAAAA,KAE0B6D,EAAkB,EACxCC,WAAWhF,EAAKiF,QAChBL,cAAAA,IACAH,WAAAA,IACAC,YAAAA,IACAzE,WAAAA,IACAsE,SAAAA,GAAAA,CAAAA,GANIzE,IAAAA,GAAAA,OAAOC,IAAAA,GAAAA,QAAAA,IASEgG,EAA0B,EACvCD,QAAAA,IACAH,YAAAA,GACAE,YAAAA,IACAJ,gBAAAA,GACAC,iBAAAA,GACA5F,OAAAA,GACAC,QAAAA,EAAAA,CAAAA,GAPIH,IAAAA,EAAAA,GAAGC,IAAAA,EAAAA;AAAAA,aAWPmD,mBAAAA,KAACqB,GAAAA,EACGrE,MAAMA,GACNJ,GAAGA,GACHC,GAAGA,GACHI,WAAWA,IACXsE,SAASA,IACTpE,SAASA,IACTe,SAASA,GACT0D,cAAcA,IACdH,WAAWA,IACXC,YAAYA,IACZC,eAAeA,GACfX,eAAeA,IACfd,gBAAgBA,IAChBH,aAAaA,GACbtC,aAAaA,GACbC,YAAYA,GACZC,eAAeA,GACfC,mBAAmBA,IACnBC,mBAAmBA,IACnBC,SAASA,IACTC,cAAcA,IACdC,cAAcA,IACdC,aAAoC,aAAA,OAAhBA,IAAAA,SAAwCA,EAAAA,CAAAA;AAAAA;APvDrC,IQf7B+E,IAAmB,EACrBC,OAAO,QACPC,QAAQ,UACRC,KAAK,QAAA;ARY0B,IQTtBC,IAAuB,SAChCC,IAAAA,IAAAA;AAAAA,MAEIrG,IAAAA,GAAAA,MAEAyF,IAAAA,GAAAA,gBACAC,IAAAA,GAAAA,iBAAAA,IAAAA,GACAC,YAAAA,IAAAA,WAAAA,IAAa,IAAA,GAAAC,KAAAtB,GACbuB,YAAAA,KAAAA,WAAAA,KAAa,IAAAD,IACbE,KAAAA,GAAAA,QACA7F,KAAAA,GAAAA,WAAAA,KAAAA,GACAsE,SAASC,KAAAA,WAAAA,KAAW,IAAAlF,IAAAE,KAAA8E,GACpBnE,SAAAA,KAAAA,WAAAA,MAAAA,IAAAA,KAAAA,GAGAyE,cAAAA,KAAAA,WAAAA,KAAe,IAAAlF,IACf+E,KAAAA,GAAAA,WACAC,IAAAA,GAAAA,YAAAA,KAAAA,GACAC,eAAAA,IAAAA,WAAAA,KAAgB,kBAAAG,IAChBd,IAAAA,GAAAA,eAAAA,IAAAA,GAGAtD,YAAAA,IAAAA,WAAAA,IAAa,KAAA,GAAA4F,KAAAhC,GACb3D,eAAAA,KAAAA,WAAAA,KAAgB,IAAA2F,IAIhBhF,KAAAA,GAAAA,OAAAA,KAG+ByD,EAAkB,EACjDC,WAAWhF,EAAKiF,QAChBR,WAAAA,IACAC,YAAAA,GACAE,cAAAA,IACA3E,WAAAA,IACAsE,SAASC,GAAAA,CAAAA,GANL1E,KAAAA,GAAAA,OAAOC,IAAAA,GAAAA,QAAQwE,IAAAA,GAAAA,SAAAA,KASNwB,EAA0B,EACvCD,QAAAA,IACAH,YAAAA,GACAE,YAAAA,IACAJ,gBAAAA,GACAC,iBAAAA,GACA5F,OAAAA,IACAC,QAAAA,EAAAA,CAAAA,GAPIH,IAAAA,GAAAA,GAAGC,IAAAA,GAAAA,GAULqF,IAAsB,UAAdjF,KAAsBwE,KAAYG,KAAe,GACzDO,IAAsB,aAAdlF,KAAyByE,IAAaE,KAAe;AAEnEyB,EAAAA,GAAIE,KAAAA,GACJF,GAAIG,UAAU5G,GAAGC,CAAAA,GAEjBwG,GAAII,OAAUnF,GAAMqC,QAAQI,KAAK2C,WAAAA,SAAcpF,GAAMqC,QAAQI,KAAK4C,cAAc,eAEhF3G,EAAK4G,QAAQ,SAACC,IAAGxB,IAAAA;AAAAA,QAAAA,IAAAA,IACPyB,KAAQzB,KAAIH,IAAQX,EAAQe,MAC5ByB,KAAQ1B,KAAIF,IAAQZ,EAAQgB,KAAAA,KAEwCrD,EACtE,EACIjC,WAAW0E,GACXxE,SAAAA,IACAO,YAAAA,GACAC,eAAAA,IACAb,OAAO2E,IACP1E,QAAQ2E,EAAAA,CAAAA,GAPRvC,KAAAA,GAAAA,SAASC,KAAAA,GAAAA,SAASC,KAAAA,GAAAA,QAAQC,KAAAA,GAAAA,QAAQC,KAAAA,GAAAA,aAAaC,KAAAA,GAAAA;AAWvD6D,IAAAA,GAAIW,YAAAA,SAAAA,KAAYH,GAAEtD,SAAAA,KAAS,SAC3B8C,GAAIY,SAASH,KAAQ3E,IAAS4E,KAAQ3E,IAAS1B,GAAYA,CAAAA,GAE3D2F,GAAIa,YAAYlB,EAAiBzD,KAEV,cAAnBC,OACA6D,GAAIc,eAAe,WAGvBd,GAAIW,YAAAA,SAAAA,KAAAA,QAAYhD,IAAAA,IAAiB1C,GAAMqC,QAAQI,KAAKd,QAAAA,KAAQ,SAC5DoD,GAAIe,SAASC,OAAOR,GAAEzC,KAAAA,GAAQ0C,KAAQzE,IAAQ0E,KAAQzE,EAAAA;EAAAA,CAAAA,GAG1D+D,GAAIiB,QAAAA;AAAAA;AR5E2B,IUTtBC,IAAkB,EAC3BC,MAAMC,kBAAAA,QAAUC,QAAQD,kBAAAA,QAAUE,MAAAA,GAGlCC,QAAQH,kBAAAA,QAAUI,MAAM,CACpB,OACA,aACA,SACA,gBACA,UACA,eACA,QACA,YACA,QAAA,CAAA,EACDC,YACHC,YAAYN,kBAAAA,QAAUO,QACtBC,YAAYR,kBAAAA,QAAUO,QACtBE,WAAWT,kBAAAA,QAAUI,MAAM,CAAC,OAAO,QAAA,CAAA,EAAWC,YAG9CK,cAAcV,kBAAAA,QAAUO,QACxBI,WAAWX,kBAAAA,QAAUO,OAAOF,YAC5BO,YAAYZ,kBAAAA,QAAUO,OAAOF,YAC7BQ,eAAeb,kBAAAA,QAAUI,MAAM,CAC3B,iBACA,iBACA,iBACA,eAAA,CAAA,GAEJU,eAAed,kBAAAA,QAAUe,QACzBC,gBAAgBhB,kBAAAA,QAAUe,QAC1BE,aAAajB,kBAAAA,QAAUO,QAEvBW,aAAalB,kBAAAA,QAAUmB,UAAU,CAC7BnB,kBAAAA,QAAUI,MAAM,CAAC,UAAU,WAAW,UAAU,UAAA,CAAA,GAChDJ,kBAAAA,QAAUoB,IAAAA,CAAAA,GAEdC,YAAYrB,kBAAAA,QAAUO,QACtBe,eAAetB,kBAAAA,QAAUO,QACzBgB,mBAAmBvB,kBAAAA,QAAUO,QAC7BiB,mBAAmBxB,kBAAAA,QAAUe,QAE7BU,SAASzB,kBAAAA,QAAUoB,MACnBM,cAAc1B,kBAAAA,QAAUoB,MACxBO,cAAc3B,kBAAAA,QAAUoB,MAExBQ,SAAS5B,kBAAAA,QAAUC,QACfD,kBAAAA,QAAU6B,MAAM,EACZC,IAAI9B,kBAAAA,QAAUmB,UAAU,CAACnB,kBAAAA,QAAUI,MAAM,CAAC,OAAA,CAAA,CAAA,CAAA,EAAYC,YACtD0B,OAAO/B,kBAAAA,QAAU6B,MAAM,EACnBf,eAAed,kBAAAA,QAAUe,QACzBC,gBAAgBhB,kBAAAA,QAAUe,QAC1BE,aAAajB,kBAAAA,QAAUO,QACvBc,YAAYrB,kBAAAA,QAAUO,QACtBgB,mBAAmBvB,kBAAAA,QAAUO,QAC7BiB,mBAAmBxB,kBAAAA,QAAUe,OAAAA,CAAAA,EAC9BV,WAAAA,CAAAA,CAAAA,EAAAA;",
  "names": ["SymbolCircle", "e", "x", "y", "size", "fill", "opacity", "c", "borderWidth", "d", "borderColor", "_jsx", "r", "cx", "cy", "strokeWidth", "stroke", "style", "pointerEvents", "SymbolDiamond", "transform", "SymbolSquare", "width", "height", "SymbolTriangle", "t", "zeroPadding", "top", "right", "bottom", "left", "computeDimensions", "t", "item", "direction", "itemsSpacing", "_padding", "padding", "itemCount", "itemWidth", "itemHeight", "Array", "isArray", "Error", "horizontalPadding", "verticalPadding", "width", "height", "spacing", "computePositionFromAnchor", "anchor", "translateX", "translateY", "containerWidth", "containerHeight", "x", "y", "computeItemLayout", "symbolX", "symbolY", "labelX", "labelY", "labelAnchor", "labelAlignment", "justify", "symbolSize", "symbolSpacing", "symbolByShape", "circle", "SymbolCircle", "diamond", "SymbolDiamond", "square", "SymbolSquare", "triangle", "SymbolTriangle", "LegendSvgItem", "c", "h", "g", "m", "f", "u", "v", "x", "y", "width", "height", "data", "direction", "B", "justify", "textColor", "background", "Y", "opacity", "T", "symbolShape", "symbolSize", "symbolSpacing", "symbolBorderWidth", "symbolBorderColor", "onClick", "onMouseEnter", "onMouseLeave", "toggleSerie", "effects", "useState", "style", "setStyle", "theme", "useTheme", "handleMouseEnter", "useCallback", "event", "filter", "t", "on", "reduce", "acc", "effect", "handleMouseLeave", "computeItemLayout", "symbolX", "symbolY", "labelX", "labelY", "labelAnchor", "labelAlignment", "isInteractive", "some", "handler", "SymbolShape", "_jsxs", "transform", "itemOpacity", "_jsx", "fill", "itemBackground", "cursor", "id", "createElement", "size", "color", "borderWidth", "borderColor", "hidden", "legends", "symbol", "undefined", "textAnchor", "text", "itemTextColor", "dominantBaseline", "pointerEvents", "userSelect", "label", "LegendSvg", "e", "padding", "_padding", "itemWidth", "itemHeight", "itemDirection", "itemsSpacing", "p", "b", "computeDimensions", "itemCount", "length", "xStep", "yStep", "map", "i", "left", "top", "BoxLegendSvg", "containerWidth", "containerHeight", "translateX", "a", "translateY", "anchor", "computePositionFromAnchor", "textAlignMapping", "start", "middle", "end", "renderLegendToCanvas", "ctx", "O", "save", "translate", "font", "fontSize", "fontFamily", "forEach", "d", "itemX", "itemY", "fillStyle", "fillRect", "textAlign", "textBaseline", "fillText", "String", "restore", "LegendPropShape", "data", "PropTypes", "arrayOf", "object", "anchor", "oneOf", "isRequired", "translateX", "number", "translateY", "direction", "itemsSpacing", "itemWidth", "itemHeight", "itemDirection", "itemTextColor", "string", "itemBackground", "itemOpacity", "symbolShape", "oneOfType", "func", "symbolSize", "symbolSpacing", "symbolBorderWidth", "symbolBorderColor", "onClick", "onMouseEnter", "onMouseLeave", "effects", "shape", "on", "style"]
}
